(namespace dom)
(include "kit-html/inc/macros.sibilant")
(import-namespace markup)
(macro dom (root) `(xml create-document-node @root))

(macro with-dom (parent root)
       `(pipe (dom @root)
              (.render @parent)))

(macro instance-of? (item type)
       ["("  type " " 'instanceof " "item ")"])

(def-lit-macro view (node)
  (interleave [`(property views (new Map))
                 `(gett parent-view this.entity.property-view.view)
                 `(gett view (cache this.views this.entity
                                    (.render (dom @node) this.parent-view)))] ",\n"))
;; Dare to dream
(def-lit-macro view-panel (...nodes)
  [`(view (.div .className "panel"
                ...@nodes))])
(def-lit-macro def-view (name args node)

  (var parent-name (.join ["parent" (first (get (transpile name) 'contents))] ""))

  (interleave [`(gett views (if this.*views this.*views
                                (assign this.*views (new Map))))
                 ;; `(gett @name (cache this.views (quote @name)
                 ;;                    (const node (dom @node))
                 ;;                    (.render   node (.append (get this (quote @parent-name))
                 ;;                                             node))
                 ;;                    ))
                `(gett @name (=> @args
                                 (cache this.views (quote @name)
                                        (dom @node))))
                ] ",\n")
  )
(import  render-children create-document-node Document-node Document-body Document-head Document-root "/shared/dom.js")
