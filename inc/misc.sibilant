(namespace misc)
(import-namespace kit)

(macro in (  o k) [k " in " o])

(macro sprint (...args) `(print ...@(Array.bind args (=> (a) [`(quote @a) a]))))

(macro set-globals (...body) `(mixin (lit ...@body) global))

(macro fluently (...body) `(scoped ...@body))

(macro accumulate (name ...body) `(assign @name (pipe @name ...@body)))
(macro do-after (name ...body) `(accumulate @name (then resolved ...@body)))
(alias-macro do-after do-after-accumulating)

(def-lit-macro def-async (name args ..body)
  ["async "  name  `(parenthetic (comma ...@args.contents)) `(curly (do-block ...@body))])
(macro def-accumulator (name args ...body)
       (const accumulated-value (.shift args.contents))
       `(def-generic @name (args)
          (do-after-accumulating @accumulated-value ...@body)))
(def-lit-macro def-accumulator (name args ...body)
  (const accumulated-value (.shift args.contents))
  `(def-generic @name @args
     (do-after-accumulating (get this (quote @accumulated-value))
       ...@body)))

(def-lit-macro def-curried (name args ...body) `(property @name (R.curry (lambda @args ...@body))))

(def-lit-macro define (name parent ...body)
  `(property @name
             (.define @parent (quote @name)
                      (lit ...@body))))



(macro remember (m k ...body)
       `(if (.has @m @k)
            (.get @m @k)
          (do (var r (scoped ...@body))
              (.set @m @k r) r)))

(macro collect (name value ...body)
       `(.call (lambda (@name) ...@body @name) this @value))

(macro array-of (size ...body)
       `(collect array []
                 (do-times @size (.push array (scoped ...@body)) array)))

(macro fourth (a) `(get @a 3))

(def-lit-macro gett-tuple (name ...keys)
  `(gett @name [...@(.map keys (=> (k) `(get this @k)))]))

(def Array.prototype.each (f)
  (.for-each this f)
  this)
(def Object.prototype.each (f)
  (pipe (Object.keys this)
        (.for-each (=> (k) (f (get this k) k)))
        )
  )


(def-lit-macro def-curried (name args ...body) `(property @name (R.curry (lambda @args ...@body))))

(def-lit-macro define (name parent ...body)
               `(property @name
                          (.define @parent (quote @name)
                                   (lit ...@body))))

(macro get? (...args)
       (const terminal (.pop args))
       [...(.map args (=> (arg) [@arg "?."])) terminal])


(macro get? (...args)
       (const terminal (.pop args))
       [...(.map args (=> (arg) [@arg "?."])) terminal] 
       )
(macro if! (cond ...body) `(state if @cond  ...@(interleave ";\n" body)))
;; (macro else-if! (cond ...body)
;;        `(state "else if" @cond  ...@(interleave ";\n" body)))

(macro else! (...body) ["else " `(block ...@(interleave ";\n" body))])

(macro cond! (...body)

       (var if-condition (.shift body)
            if-block (.shift body))
       (var arr
              [
               `(state if @if-condition  ...@(interleave ";\n" if-block.contents))
               ]
              )
       (while (or (and (even? body.length) (> body.length 0))
                  (and (odd? body.length) (> body.length 1)))
         (var else-if-condition (.shift body)
              else-if-block (.shift body))
         (assign arr [...arr "else if(" else-if-condition ")"
                             `(block ...@(interleave ";\n" else-if-block.contents))]))
       (if (odd? body.length)
           (assign arr [...arr "else " `(block ...@(interleave ";\n" (get (last body) 'contents)))]))
       arr)

(macro if-else! (cond if-block else-block)
       [`(state if @cond  ...@(interleave ";\n" if-block.contents))
         "else " `(block ...@(interleave ";\n" else-block.contents))
         ])
(macro while! (cond ...body)
        `(state while @cond  ...@(interleave ";\n" body))
        )

(def-lit-macro cached (name ...rest)
  `(gett @name (if (get this (quote (quote @['* name])))
                   (get this (quote (quote @['* name])))
                   (set this (quote (quote @['* name]))
                        (scoped ...@rest)))))
(macro clear-cache (obj name)
       `(when (get @obj (quote (quote @['* name])))
          (if (get @obj (quote (quote @['* name]))
                   'spawn)
              (.despawn (get @obj (quote (quote @['* name]))))
              (and (first (get @obj (quote (quote @['* name]))))
                   (get (first (get @obj (quote (quote @['* name]))))
                        'spawn))
              ;; When this file works, we need to optimize the initial cached lit macro to consider array items that might need to be cached.
              ;; it should check if there is an array, then if the array is empty.
              (each (get @obj (quote (quote @['* name]))) (el)
                    (.despawn el)))
          (set @obj (quote (quote @['* name]))
               null)))
(def-lit-macro expects (name)
  `(gett @name
         (throw (new Type-error (+ this.name " expects a definition of " (quote @name))))))

(macro every (array args ...rest) `(.every @array (=> @args ...@rest)))

(macro reduce (array initial-value args ...rest) `(.reduce @array (=> @args ...@rest)
                                                           @initial-value))

(macro filter (array args ...rest) `(.filter @array (=> @args ...@rest) ))
(macro sort (array args ...rest) `(.sort @array (=> @args ...@rest) ))

(def-lit-macro spread (spreadable)
  ["..." spreadable]
  )
(macro tidy (vars ...body)
       (const last (.pop body))
       `(let @vars
          ...@body
          (const r @last)
          ...@(map vars.contents (v)
                   (const name (first v.contents))
                   (const value (second v.contents))

                   `(.despawn @value))
          r))
