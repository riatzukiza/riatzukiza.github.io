(def-lit-macro generic (name def args ...body)
       `(...@(content-of def) @name
            (...@(functor (content-of args) .map (arg)

                          (if (expression? arg)
                              `(default @(first (content-of arg)) @(second (content-of arg)))
                              (or (brace? arg)
                                  (bracket? arg))
                              `(default @arg [...@(.map arg.contents
                                                        (=> (varname)
                                                            `(get this (quote @varname))))])
                              `(default @arg (get this (quote @arg))))))
            ...@body))
(def-lit-macro def-curried (name args ...body)
  `(property @name (R.curry (lambda @args ...@body))))

(def-lit-macro define (name parent ...body)
               `(property @name
                          (.define @parent (quote @name)
                                   (lit ...@body))))

(def-lit-macro cached (name ...rest)
  `(gett @name (if (get this (quote (quote @['* name])))
                   (get this (quote (quote @['* name])))
                   (set this (quote (quote @['* name]))
                        (scoped ...@rest)))))
