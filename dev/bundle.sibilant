(def-async bundle (file dest compile?)

  (var bundle (remember (if (= (Path.basename file.path) "main.js") main-bundles
                            bundles) file.rel
                            (var b (browserify ))

                            (print "bundling" file.rel dependencies)

                            (each dependencies (name)

                                  (print "marking" name "As external to" file.rel)
                                  (.external b name))

                            (each lib-bundles (_b path)
                                  (var shared-path (Path.join "@shared" path))

                                  (.external b  shared-path ))

                            (if (= (Path.basename file.path) "main.js")
                                (do ;; (print "main bundle" file.path  )
                                    (.add b file.path))
                                (do
                                 (const exposed-name (+ "@" file.rel))
                                 ;; (print "application dependency" file.path "as" exposed-name)
                                  (.require b file.path (lit (expose exposed-name))))) b))


  (when compile?
    (each lib-bundles (b path)
          (.external bundle (Path.join "@shared" path)))

    (each bundles (b path)
          (each bundles (b* path*)
                (unless (= path path*)

                  (const bundle-name (+ "@" path*))
                  ;; (print "adding" bundle-name "to" path "bundle")
                  (.external b bundle-name)))
          (each main-bundles (main-bundle main-path)
                (const bundle-name (+ "@" path))
                ;; (print "adding" bundle-name "to" main-path "bundle")
                (.external main-bundle bundle-name)))


    (pipe (.insert dest file.rel)
          (.then
           (=> (dest-file)
               (var reader (.bundle bundle))
               (var writer dest-file.write-stream)

               (make-promise
                (.on reader 'error fail)
                (.on writer 'finish success)
                (.on writer 'error fail)
                (.pipe reader writer))))
          (.then (-> (print "done bundling project module" file.path (Path.join dest.root file.rel))))
          (.catch (=> (e)

                      (print "an exception has occured in the module bunler"
                             file.path
                             e)

                      (if (= (Path.basename file.rel) "main.js")
                          (.delete main-bundles file.rel)
                          (.delete bundles file.rel)
                          ))))))
