(def-async compile-module (file dest header)

  ;; (print "compiling module" file.path "for" (Path.join dest.root file.rel))

  (try!

   (var lisp (await file.string))
   (var js (await (.send compiler (+

                                   "(include \"./headers/core.sibilant\")"
                                   "(import-namespace kit)"

                                   "(include \"./headers/interface.sibilant\")"
                                   "(import-namespace interface)"

                                   "(include \"./inc/litteral.sibilant\")"
                                   "(include \"./inc/docs.sibilant\")"
                                   "(include \"./inc/misc.sibilant\")"
                                   "(include \"./inc/generators.sibilant\")"
                                   "(import-namespace misc)"
                                   "(import-namespace generators)"
                                   "(import-namespace docs)"
                                   (or header "")

                                   "(meta (assign sibilant.dir \"" (Path.dirname file.path) "\" ) null)"
                                   lisp))))
   (await (.send compiler "(meta (assign sibilant.dir \".\") null)"))

   (var dest-path (+  (strip-sibilant-extension file.rel ) ".js"))

   (await (.insert dest dest-path ))
   (await (.set dest dest-path js))
   (print "compiled project module" file.path)
   (catch!
    (print "An error has occured in compiling a module"
           file.path)
    (print e)))
  null
  )
