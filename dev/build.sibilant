
(namespace dev)

(include "./header"
         "./compile")

(macro html (...body) `(markup (.html ...@body)))

(import-namespace kit)
(import-namespace interface)
(import-namespace async)
(import-namespace markup)

(require! (lit read-file-sync) 'fs)

(const package-json (JSON.parse (read-file-sync "./package.json")))
(const dependencies (Object.keys package-json.dependencies))

(define src Interface
  (inc (.load File-system "./inc"))
  (client (.load File-system "./src/client"))
  (shared (.load File-system "./src/shared"))
  (server (.load File-system "./src/server"))

  (templates (.load File-system "./src/templates")))

(define js Interface

  (client (.load File-system "./static/client"))
  (shared (.load File-system "./static/shared"))
  (server (.load File-system "./server"))

  (templates (.load File-system "./templates"))

  (bundles (.load File-system "./static/bundles"))
  (shared-bundles (.load File-system "./static/bundles/shared")))

(define html Interface
  (files (.load File-system "./static")))

(def-async main ()
  ;; LISP program files
  (await (each src.server (file) (compile-module file js.server)))

  (await (bundle-external))

  ;: LISP modules
  (await (each src.shared (file) (compile-client-module file js.shared)))
  (await (each src.client (file) (compile-client-module file js.client)))

  ;; LISP HTML Templates
  (await (each src.templates (file) (compile-module file js.templates)))

  ;; HTML
  (await (each js.templates (file) (compile-html file html.files))))

(.then (main) (-> (print "waiting for changes") null))
