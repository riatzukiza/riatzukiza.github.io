(def-async bundle-shared (file dest compile?)

  (var bundle (remember lib-bundles file.rel
                        (var b (browserify (lit (basedir (Path.dirname file.rel)))))

                        (print "bundling" file.rel dependencies)
                        (each dependencies (name)
                              (print "marking" name "As external to" file.rel)
                              (.external b name))
                        (.require b file.path (lit (expose (Path.join "@shared" file.rel))))
                        b))

  (when compile?
    (each lib-bundles (b path)
          (each lib-bundles (b* path*)
                (unless (= path path*)
                  (.external b (Path.join "@shared" path*)))))

    (pipe (.insert dest file.rel)
          (.then (=> (dest-file)

                     (var reader (.bundle bundle))
                     (var writer dest-file.write-stream)

                     (make-promise
                      (.on reader 'error fail)
                      (.on writer 'finish success)
                      (.on writer 'error fail)
                      (.pipe reader writer))))
          (.then (-> (print "done bundling shared module" file.path (Path.join dest.root file.rel))))
          (.catch (=> (e)
                      (print "An error has occured in compiling a shared module"
                              file.path
                              e
                              )
                      (.delete lib-bundles file.rel)
                      ) ))))
