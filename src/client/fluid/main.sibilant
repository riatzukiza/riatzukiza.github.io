(include "../../../inc/dom.sibilant")
(import simplex3 simplex2 "/shared/noise.js")
(import Vector-2D-phase-space "./typed-arrays/vector-2d.js")
(import Double-buffered-array "./typed-arrays/double-buffered.js")
(import rendering vertex-layer "./rendering.js")
(import Thread "/shared/worker.js")
(import config "./config.js")
(import Ticker "/shared/ticker.js")
(import Vector "/shared/vectors.js")
(import Data-type "./data-types/data-type.js")

(define Threaded-system Thread
  (data [])
  (def update (args)
    (.send this (lit args (buffers (map this.data (data)
                                   [data.current-state.buffer
                                    data.next-state.buffer]))))))

(define Physical-property Data-type
  (keys ['mass ])
  )
(define Physical-properties Double-buffered-array
  (data-type Physical-property))
(const spawn-width 128)
(const spawn-height 128)

(const particle-count 2024)
(const max-mass (* 1024))
(const min-mass 512)
(const actual-maximum-mass (Math.pow max-mass 3))
(const particle-render-size 512)



(const velocities (.spawn Vector-2D-phase-space particle-count))
(const attractors (.spawn Vector-2D-phase-space particle-count))
(const physical-properties (.spawn Physical-properties particle-count))

(const positions (.spawn Vector-2D-phase-space  particle-count ))
(const vertices (vertex-layer particle-count))


(define Movement-system Threaded-system
  (url "/client/fluid/workers/movement.js")
  (data [velocities positions attractors]))

(define Noise-system Threaded-system
  (url "/client/fluid/workers/noise.js")
  (data [velocities positions]))

(define Attractor-system Threaded-system
  (url "/client/fluid/workers/attractors.js")
  (data [velocities positions attractors physical-properties]))



(def update-motes (positions verts)
  (for-of! p positions.data
           (set (get verts p.id 'color) 'r 255 'g 10 'b 10 'a 255)
           (set  (get verts p.id)

                 'size particle-render-size
                 'intensity 0.9)
           (set (get verts p.id 'point)
                'x p.x
                'y p.y
                'z 1))
  null)
(def randomly-place-particles ()
  (const spawn-pos (.spawn Vector (-  (* spawn-width (Math.random)) spawn-width)
                           (-  (* spawn-height (Math.random) ) spawn-height)
))
  (for-of! p positions.data
           (const phys (get physical-properties.data p.id))
           (assign phys.mass (Math.max min-mass (Math.pow (* max-mass (Math.random)) 3)))

           (.add-to spawn-pos (lit (x (random-float (* -1 spawn-height) spawn-height))
                                   (y (random-float (* -1 spawn-width) spawn-width))))

           (assign p.x spawn-pos.x)
           (assign p.y spawn-pos.y))
  null)

(def get-bounds (positions)
  (var min-x 0 min-y 0 max-x 0 max-y 0)
  (for-of! p positions.data
           (if (< p.x min-x) (assign min-x p.x))
           (if (< p.y min-y) (assign min-y p.y))

           (if (> p.x max-x) (assign max-x p.x))
           (if (> p.y max-y) (assign max-y p.y)))
  (return [min-x min-y max-x max-y]))

(def handle-load ()

  (randomly-place-particles)
  (update-motes positions vertices)

  (.step physical-properties)

  (.step positions)
  ;; (for-of! v velocities.data
  ;;          (const p (get positions.data v.id))
  ;;          (set-move-noise v p.x p.y ))


  (.step velocities)

  ;; (for-of! p positions.data (set p 'x p.x 'y p.y))

  ;; (.step positions)
  ;; (for-of! v velocities.data
  ;;          (set v 'x v.x 'y v.y))


  ;; (.step velocities)
  (.update rendering)

  (print vertices)
  (print positions)
  (print velocities)

  (def wait (n) (make-promise (set-timeout resolve n) ))
  (def-async draw ()
    (while! true
            (await (make-promise
                    (request-animation-frame (-> (.update rendering)
                                                 (resolve)))))
            )
    (return null)
    )
  (def-async main ()


    ;; (.init Noise-system)
    (.init Movement-system)
    (.init Attractor-system)

    ;; (.start Noise-system )
    (.start Movement-system)
    (.start Attractor-system)
    (const drawer (draw)) ;; heh

    (var promise (Promise.resolve))
    (while! true
            (await (Promise.all
                    [;;(.update Noise-system)
                     (.update Attractor-system (lit (bounds (get-bounds positions))))
                     (.update Movement-system )  ]))

            (.step positions)
            ;; (.step velocities)
            (.step attractors)
            (for-of! p positions.data
                     (const v (get velocities.data p.id))
                     (const a (get attractors.data p.id))
                     (const phys (get physical-properties.data p.id))
                     ;; (set (get vertices p.id 'color)
                     ;;      'g (Math.abs (Math.round (/ (* 256 (.get-length v))
                     ;;                                  2))))
                     (set (get vertices p.id 'color)
                          'b (Math.min 255 (Math.abs (Math.round (* 1 (.get-length a))))))

                     (set (get vertices p.id)
                          'intensity (Math.max min-mass (* max-mass (/ phys.mass actual-maximum-mass)))
                           'size (Math.max min-mass (* max-mass (/ phys.mass actual-maximum-mass))))
                     (set (get vertices p.id 'point)
                          'x p.x
                          'y p.y))



            ;; (await (wait 1000))
            )

    (return null))
  (const game-view (dom (.div .id "game-view" .className "panel"
                              .style (lit ("background-color" "black"))
                              (-> rendering.context.canvas))))

  (const load-selected-game (-> (load-game (get (.get-element-by-id document 'load-save-name-field) 'value))))

  (const load-button (dom (.button .onclick load-selected-game "load game")))
  (const load-name-field (dom (.input .type 'text .id 'load-name-field)))

  (const load-widget (dom (.div .id 'load-game load-name-field load-button)))

  (const save-selected-game (-> (save-game (get (.get-element-by-id document 'save-name-field) 'value))))

  (const save-button (dom (.button .onclick save-selected-game "save game")))
  (const save-name-field (dom (.input .type 'text .id 'save-name-field)))

  (const save-widget (dom (.div .id 'save-game save-name-field save-button)))

  (const start-button (dom (.div .id 'start-game (.button .onclick main "start game"))))
  (with-dom Document-body
    (.div .id 'frame (.div .id "container"
                           game-view
                           (.div .id "debug-view" .className "panel"
                                 .style (lit (height (+  (second config.dimensions)"px"))
                                             (width (+ (Math.round (- (* window.innerWidth 0.2) 42)) "px"))
                                             ("overflow-y" "scroll"))
                                 start-button
                                 )))))
(add-event-listener 'load handle-load)


