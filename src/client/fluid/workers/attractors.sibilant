(meta "import '/bundles/external.js'")

(import Vector-2D-phase-space "../typed-arrays/vector-2d.js")
(import Double-buffered-array "../typed-arrays/double-buffered.js")

(import Data-type "../data-types/data-type.js")

(import Vector "/shared/vectors.js")
(import Spawnable "/shared/data-structures/spawnable.js")

(require! Quad-tree  "@timohausmann/quadtree-js")

(import config "../config.js")
(const (lit gravitational-constant min-dist max-objects max-levels max-mass min-mass) config)

(const actual-maximum-mass (Math.pow max-mass 3))

(def calculate-gravitational-intensity (target affector)

  (const dist (.distance-to  affector.pos target.pos))
  (const used-distance (Math.max (.get-length dist ) ))
  
  (const mag (Math.sqrt (+ (* dist.x dist.x)
                           (* dist.y dist.y))))
  (Math.abs (/ (* gravitational-constant  affector.mass used-distance)
               (Math.pow mag 2))))

(define Physical-property Data-type
  (keys ['mass 'scale])
  )
(define Physical-properties Double-buffered-array
  (data-type Physical-property)
  )

(define Attractor-group Spawnable
  (init ((members (or this.members []))))
  (cached center
          (var center (.spawn Vector 0 0))
          (for-of! member this.members

                   (const a (.mult member.pos member.mass))
                   (.add-to center a)
                   (.despawn a))
          (.div-to center this.mass)

          (return center )
          )
  (cached mass (var mass 0)
          (for-of! member this.members
                   (incr-by mass member.mass))
          mass)
  (def clear ()
    (clear-cache  this center)
    (clear-cache this mass)
    (assign this.members.length 0)))

(define Particle Spawnable
  (init (pos-source
         attractor
         mass
         scale
         (height scale)
         (width scale)
         (base-vel (.spawn Vector attractor.x attractor.y))
         (pos (.spawn Vector pos-source.x pos-source.y))
         (vel (.spawn Vector 0 0))))
  (gett x this.pos-source.x)
  (gett y this.pos-source.y)
  (def clear ()
    (assign this.pos-source null)
    (.despawn this.pos)
    (.despawn this.vel)
    (.despawn this.base-vel)
    (assign this.pos null)
    (assign this.vel null)
    (assign this.width null)
    (assign this.height null)
    )

  (gett id this.pos-source.id)

  )
(def self.onmessage (e)
  (const [[vb1 vb2] [pb1 pb2] [ab1 ab2] [mb1 mb2]] e.data.buffers)

  (const (lit (bounds [min-x min-y max-x max-y])) e.data.args)

  (const positions (.from-buffers Vector-2D-phase-space pb1 pb2))
  (const attractors (.from-buffers Vector-2D-phase-space ab1 ab2))
  ;; (.step attractors)
  (const phys (.from-buffers Physical-properties mb1 mb2))
  (const quads-config (lit (x min-x) (y min-y)
                           (height (- max-y min-y))
                           (width (- max-x min-x ))))

  (const quads (new Quad-tree quads-config
                    max-objects
                    max-levels
                    ))
  (const particles [])
  (for-of! pos positions.data
           (const attractor (get attractors.data pos.id))
           (const object (get phys.data pos.id ))
           (const particle (.spawn Particle pos attractor object.mass object.scale) )
           (.push particles particle)
           (.insert quads particle))


  (const visited (new Set))
  (const groups [])
  ;; (const loner-group (.spawn Attractor-group))
  (for-of! pos positions.data
           (const target (get particles pos.id) )
           
           (const object (get phys.data pos.id))
           (const p (.spawn Vector pos.x pos.y))

           (const elements (sort (.retrieve quads (lit (x pos.x) (y pos.y)
                                                       (height (* 4 object.scale))
                                                       (width (* 4 object.scale))))
                                 (a b)
                                 (const d1 (Math.abs (.distance-to p a.pos)))
                                 (const d2 (Math.abs (.distance-to p b.pos)))
                                 (if (> d1 d2) 1 -1)))
           (.despawn p)
           (for-of! affector elements
                    (if! (= target.id affector.id) continue)

                    (const dist (.distance-to  affector.pos target.pos))
                    (const used-distance (Math.max (.get-length dist ) ))
                    (.despawn dist)
                    (if! (>  (Math.pow (+ target.scale affector.scale) 2) (Math.abs used-distance))


                         (const vector1 (.spawn Vector target.base-vel.x target.base-vel.y))
                         (const vector2 (.spawn Vector affector.base-vel.x affector.base-vel.y))

                         (const theta (Math.atan2 (- vector1.y vector2.y)
                                                  (- vector1.x vector2.x)))

                         (const v1 (pipe vector1 (.rotate-to (- theta))))
                         (const v2 (pipe vector2 (.rotate-to (- theta))))
                         (const m target.mass)
                         (const m* affector.mass)


                         (const u1 (pipe (.spawn Vector
                                                 (+ (/ (* v1.x (- m m*)) (+ m m*))
                                                    (* v2.x 2 (/ m* (+ m m*))))
                                                 v1.y)
                                         (.rotate-to theta)
                                         ;; (.mult-to (/ (+ target.scale affector.scale)  used-distance))
                                         ;; (.mult-to (/ (Math.pow used-distance 2) (Math.pow (+ target.scale affector.scale) 2) ))
                                         ))

                         ;; (const u2 (pipe (.spawn Vector
                         ;;                         (+ (/ (* v2.x (- m* m))
                         ;;                               (+ m* m))
                         ;;                            (* v1.x 2 (/ m (+ m* m))))
                         ;;                         v2.y)
                         ;;                 (.rotate-to theta)
                         ;;                 ))


                         (set target.base-vel 'x u1.x 'y u1.y)
                         ;; (set affector.base-vel 'x u1.x 'y u1.y)
                         (.despawn u1)
                         ;; (.despawn u2)
                         (.despawn v1)
                         (.despawn v2)
                         )

                    )

           ;; (if! (.has visited pos.id) continue)
           (var group (.spawn Attractor-group ))
           ;; (.push group.members (first elements))

           (for-of! neighbor elements

                    (if! (>  group.members.length 64)
                         (.push groups group)
                         (assign group (.spawn Attractor-group)))
                    ;; (if! (>  group.members.length 10) break)

                    (if! (.has visited neighbor.id) continue)

                    (.add visited neighbor.id)
                    (.push group.members neighbor)
                    (assign neighbor.group group)
                    )
           (if group.members.length
               (.push groups group)
               (.despawn group)))
  ;; (if! (>  loner-group.members.length 0)
  ;;      (.push groups loner-group))
  ;; (.step attractors)

  (loop (for-of! group groups)
   (for-of! target group.members
            (for-of!  affector-group groups
                      (if! (= target.group affector-group) continue)
                      (const dist (.distance-to  affector-group.center target.pos))
                      (const used-distance (Math.max min-dist (Math.abs (.get-length dist))))
                      (const mag (Math.sqrt (+ (* dist.x dist.x)
                                               (* dist.y dist.y))))

                      (const intensity (Math.abs (/ (* gravitational-constant
                                              affector-group.mass
                                              used-distance)
                                           (Math.pow mag 2))))

                      (.set-length dist intensity)
                      (.add-to target.vel dist)
                      (.despawn dist)))
   (for-of! affector group.members

            (if! (= target.id affector.id) continue)
            (const dist (.distance-to  affector.pos target.pos))
            (const used-distance (Math.max (.get-length dist ) ))
            
            (const mag (Math.sqrt (+ (* dist.x dist.x)
                                     (* dist.y dist.y))))
            (const intensity (Math.abs (/ (* gravitational-constant  affector.mass used-distance)
                                          (Math.pow mag 2))))

            (.set-length dist intensity)
            (.add-to target.vel dist)
            (.despawn dist)
            ))

  (for-of! particle particles

           (.add-to particle.base-vel particle.vel )
           (set particle.attractor
                'x particle.base-vel.x
                'y particle.base-vel.y)
           (.despawn particle)
           ;; (.despawn particle.vel )
           ;; (.despawn particle.pos)
           )
  (for-of! group groups (.despawn group))
  (.clear quads)


  ;; (.add-to positions velocities)
  (.post-message self [[vb1 pb1] [vb2 pb2] [ab1 ab2]])


  ;; (.pause Atomics)
  ;; (.wait Atomics (new Big-int64-array vb2))

  (.despawn positions)
  )
