
(meta "import '/bundles/external.js'")

(import Vector "@shared/vectors.js")
(import Spawnable "@shared/data-structures/spawnable.js")
(import Physics-array "@colliding-particles/typed-arrays/physics-array.js")
(import Group-id-array "@colliding-particles/typed-arrays/group-id-array.js")
(import Vector-2D-array "@colliding-particles/typed-arrays/vector-2d.js")
(import Kd-tree "@colliding-particles/typed-arrays/kd-tree.sibilant")
(import Threaded-system "@colliding-particles/system.sibilant")

(import config "@colliding-particles/config.js")
(const (lit gravitational-constant ) config)

(import Parent-system "@colliding-particles/system.sibilant")

(def-lit-macro def-async (name args ..body)
  ["async "  name  `(parenthetic (comma ...@args.contents)) `(curly (do-block ...@body))])

(define Deflection-group-system Threaded-system
  (url "/client/colliding-particles/workers/local-attractor-system.js")
  (data []))




(const threads [])
(for! (i 0) (> config.collision-group-count i) (incr i)
      (const thread (.spawn Deflection-group-system))
      (assign thread.url (+ "/client/colliding-particles/workers/kd-deflection.js?gid=" i))
      (.start thread)
      (.push threads thread))

(define Elastic-deflection-system Parent-system
  (data-types [
             Vector-2D-array
             Vector-2D-array
             Physics-array
             Kd-tree
             Vector-2D-array
             Vector-2D-array
             ])

  (def-async update ((lit bounds) [ positions velocities phys kd-tree deflections corrections ])
    (Promise.all (map threads (thread i)
                      (assign thread.args (lit (collision-group-id i) bounds))
                      (assign thread.data [
                              positions velocities phys

                              kd-tree

                              deflections corrections ])
                      (.update thread)))))

(.start Elastic-deflection-system )
