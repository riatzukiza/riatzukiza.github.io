
(meta "import '/bundles/external.js'")

(import Vector "/shared/vectors.js")
(import Spawnable "/shared/data-structures/spawnable.js")
(import Physics-array "../typed-arrays/physics-array.js")
(import Group-id-array "../typed-arrays/group-id-array.js")
(import Vector-2D-array "../typed-arrays/vector-2d.js")

(import config "../config.js")
(const (lit gravitational-constant ) config)

(def calculate-gravitational-intensity (target affector)

  (const dist (.distance-to  affector.pos target.pos))
  (const used-distance (Math.abs (.get-length dist )))
  (const mag (Math.sqrt (+ (* dist.x dist.x)
                           (* dist.y dist.y))))
  (.set-length dist (Math.abs (/ (* gravitational-constant  affector.mass used-distance)
                                 (Math.pow mag 2))))
  (return dist)
  )


(define Particle-group Spawnable
  (init (id groups (members (or this.members [])))
        (set groups id this))
  (cached center
          (var center (.spawn Vector 0 0))
          (for-of! member this.members

                   (const a (.mult member.pos member.mass))
                   (.add-to center a)
                   (.despawn a))
          (.div-to center this.mass)

          (return center )
          )
  (cached mass (var mass 0)
          (for-of! member this.members
                   (incr-by mass member.mass))
          mass)
  (def clear ()
    (clear-cache  this center)
    (clear-cache this mass)
    (set this.groups this.id null)
    (assign this.members.length 0)))

(define Local-particle Spawnable
  (init (pos-source
         phys-source
         group-id-source
         near-gravity-source

         (mass phys-source.mass)
         (scale phys-source.scale)

         (group-id group-id-source.group-id)

         (height scale)
         (width scale)

         (pos (.spawn Vector pos-source.x pos-source.y))
         (vel (.spawn Vector 0 0))))
  (gett x this.pos-source.x)
  (gett y this.pos-source.y)
  (def clear ()
    (assign this.pos-source null)
    (.despawn this.pos)
    (.despawn this.vel)
    (assign this.pos null)
    (assign this.vel null)
    (assign this.width null)
    (assign this.height null)
    )

  (gett id this.pos-source.id)

  )
(define Local-attractor-system Parent-system
  (data-types [ Vector-2D-array Physics-array Group-id-array Vector-2D-array ])
  (def-async update (args [ position phys group-id ])

    (const groups [])
    (const particles [])

    (for-of! pos positions.data
             (const particle (.spawn Local-particle pos
                                     (get phys.data pos.id)
                                     (get group-id.data pos.id)
                                     (get near-gravity.data pos.id)))
             (const group (if (not (get groups particle.group-id))
                              (.spawn Particle-group particle.group-id groups)
                              (get groups particle.group-id)))
             (.push particles particle)
             (.push group.members particle))

    (loop (for-of! group groups)
     (for-of! target group.members)
     (for-of! affector group.members
              (if! (= target.id affector.id) continue)
              (const intensity (calculate-gravitational-intensity target affector))
              (.add-to target.vel intensity)
              (.despawn intensity)
              ))

    (for-of! particle particles

             (set particle.near-gravity-source
                  'x particle.vel.x
                  'y particle.vel.y)
             (.despawn particle)
             )
    (for-of! group groups (.despawn group))
    (return null)))

(.start Local-attractor-system)

