

(meta "import '/bundles/external.js'")

(import Vector-2D-array "@colliding-particles/typed-arrays/vector-2d.js")

(import Vector "@shared/vectors.js")
(import Spawnable "@shared/data-structures/spawnable.js")
(import Physics-array "@colliding-particles/typed-arrays/physics-array.js")
(import Barycenter-array "@colliding-particles/typed-arrays/barycenter-array.js")
(import Group-id-array "@colliding-particles/typed-arrays/group-id-array.js")
(import Parent-system "@colliding-particles/system.sibilant")

(import config "@colliding-particles/config.js")
(const (lit gravitational-constant min-dist ) config)



(define Particle-group Spawnable
  (init (barycenter groups (members (or this.members [])))
        (set groups barycenter.id this))
  (gett id this.barycenter.id)
  (cached center (.spawn Vector this.barycenter.x this.barycenter.y))
  (gett mass this.barycenter.mass)
  (def clear ()
    (clear-cache  this center)
    (clear-cache this mass)
    (set this.groups this.id null)
    (assign this.members.length 0)))

(define Distant-particle Spawnable
  (init (pos-source
         phys-source
         group-id-source
         far-gravity-source

         (mass phys-source.mass)
         (scale phys-source.scale)

         (group-id group-id-source.group-id)

         (height scale)
         (width scale)

         (pos (.spawn Vector pos-source.x pos-source.y))
         (vel (.spawn Vector 0 0))))
  (gett x this.pos-source.x)
  (gett y this.pos-source.y)
  (def clear ()
    (assign this.pos-source null)
    (.despawn this.pos)
    (.despawn this.vel)
    (assign this.group null)

    (assign this.pos null)
    (assign this.vel null)
    (assign this.width null)
    (assign this.height null)
    )

  (gett id this.pos-source.id)

  )

(define Cluster-attractor-system Parent-system
  (data-types [

              Vector-2D-array
              Physics-array
              Group-id-array
              Barycenter-array

              Vector-2D-array

              ])
  (def-async update (args [ positions phys group-id barycenters far-gravity ])

    (const groups [])
    (const particles [])
    (for-of! pos positions.data


             (const particle (.spawn Distant-particle
                                     pos
                                     (get phys.data pos.id)
                                     (get group-id.data pos.id)
                                     (get far-gravity.data pos.id)))
             (const group (if (not (get groups particle.group-id))
                              (.spawn Particle-group (get barycenters.data particle.group-id) groups)
                              (get groups particle.group-id)))
             (assign particle.group group)
             (.push particles particle)
             (.push group.members particle)
             )

    (loop (for-of! target particles)
     (for-of! affector-group groups

              (if! (not affector-group) continue)
              (if! (= target.group-id affector-group.id) continue)

              (const dist (.distance-to  affector-group.center target.pos))
              (const used-distance (Math.abs (.get-length dist)))
              (if! (< used-distance (Math.pow (* 2 target.scale) 2))
                   (set dist 'x 0 'y 0)
                   (.despawn dist)
                   continue)
              (const mag (Math.sqrt (+ (* dist.x dist.x)
                                       (* dist.y dist.y))))

              (const intensity (Math.abs (/ (* -1 gravitational-constant
                                               affector-group.mass
                                               target.mass
                                               used-distance)
                                            (Math.pow mag 2))))

              (.set-length dist intensity)
              (.add-to target.vel dist)
              (.despawn dist)
              )
     )
    

    (for-of! particle particles

             (set particle.far-gravity-source
                  'x particle.vel.x
                  'y particle.vel.y)
             (.despawn particle))

    (for-of! group groups (if! group (.despawn group)))
    (return null)
    ))

(.start Cluster-attractor-system)
