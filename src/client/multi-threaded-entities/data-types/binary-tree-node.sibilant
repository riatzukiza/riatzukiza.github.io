
(import Data-type "./data-type.sibilant")


(define Binary-tree-node Data-type
  (gett left  (get this.array.data (+ (* 2 this.id) 1)))
  (sett left data (const node this.left )
        (for-of! key this.data-type.keys
                 (set node key (get data key)))
        (return null))
  (def copy-to (target)
    (for-of! key this.data-type.keys
             (set target key (get this key)))
    (return target))

  (gett right (get this.array.data (+ (* 2 this.id) 2)))
  (sett right data (const node this.right )
        (for-of! key this.data-type.keys
                 (set node key (get data key)))
        (return null))

  (gett parent (get this.data.array (Math.floor (/ (- this.id 1) 2))))

  (gett has-one-child? (or (not this.left) (not this.right)))
  (gett has-two-children? (and this.left this.right))

  (gett grandparent this.parent.parent)
  (gett is-leaf? (and (not this.left) (not this.right)) )

  (gett successor
        (var temp this)
        (while temp.left
          (assign temp temp.left))
        (return temp))

  ;; (gett is-root? (= this this.root))
  (gett is-root? (not this.parent))
  (gett uncle (if (or (not this.parent) (not this.grandparent))
                  null

                  this.parent.is-on-left?
                  this.grandparent.right

                  this.grandparent.left))

  (gett is-on-left? (= this this.parent.left))
  (gett sibling (if (not this.parent)
                    null
                    this.is-on-left?
                    this.parent.right

                    this.parent.left))

  (def clear () (.call Data-type.clear this))

  (def move-down (n-parent)
    ;; (.check-colors this)
    (if this.parent
        (if this.is-on-left?
            (assign this.parent.left n-parent)
            (assign this.parent.right n-parent))))


  (def-generic rotate-left ()
    (const n-parent this.right)

    (.move-down this n-parent)

    (assign this.right n-parent.left))

  (def-generic rotate-right ()
    (const n-parent this.left)

    (.move-down this n-parent)

    (assign this.left n-parent.right)))

(export Binary-tree-node)
