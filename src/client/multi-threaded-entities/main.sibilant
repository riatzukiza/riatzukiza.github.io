;; Make a sprite do a random walk with threads.
;; The sprites spawn at an interval, then eventually despawn.

(define Animation-controller Interface)

(define Mote-spawn-controller Interface )
(define Mote-despawn-controller Interface)

(define Random-walk-controller Interface )
(define Velocity-controller Interface )

(define Acceleration-controller Interface)
(define Position-data Game-component

  (data-keys ['x 'y]))

(define Position-array Game-component-array
  (data-type Position-data))


(define Position Component

  (gett x this.pos.x)
  (gett y this.pos.y))

(const positions (.spawn Position-array 1024))
(const velocities (.spawn Velocity-array 1024))
(const accelerations (.spawn Acceleration-array 1024))
(const noise (.spawn Noise-array 1024))


(define Worker-system System
  (doc-string "Worker-thread-system" ""
              "An interface to a controller being ran in another thread")
  (def *update-all ()
    )
  )

(define Position-controller Interface
  (def update (args [positions velocities)
    (for-of! pos positions.data

             (const v (get velocities.data pos.id))
             (const c (get corrections.data pos.id))

             (const p* (.spawn Vector v.x v.y))
             (.add-to p* v)
             (.add-to p* c)

             (.add-to pos p*)
             (.despawn p*))))
(define Movement-system Worker-system
  (data [positions velocities)
  (controller Position-controller))


(define Game-controller Interface
  (init (( game ((create Game) config active-game-systems config.game-speed)) ))
  (gett events this.game.events)

  (def-generic pause (game) (.stop game))
  (def-generic start (game) (.start game))


  )
