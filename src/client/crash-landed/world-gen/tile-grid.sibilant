(import Event-emitter "/shared/kit/events/index.js")
(import Spawnable "/shared/data-structures/spawnable.js")
(import Trie "/shared/data-structures/trees/trie.js")
(import Super-position "./super-position.js")
(import Grid-cell Grid Grid-chunk "/shared/grid.js")
(import Binary-heap Heapable "/shared/data-structures/trees/binary-heap.js")
(import Vector "/shared/vectors.js")


(macro method* (name args ..body)
       ["*"name  `(parenthetic (comma @args.contents))
           `(curly (do-block ...@body))])
(def-lit-macro def-async (name args ...body)
  [" async "name  `(parenthetic (comma @args.contents))
            `(curly (do-block ...@body))])

(def-lit-macro def-async* (name args ...body)
  [" async *"name  `(parenthetic (comma @args.contents))
             `(curly (do-block ...@body))])

(def-lit-macro def-generic* (name args ...body)
  `(generic @name (method*) @args ...@body))
(define Tile Grid-cell
  (cached super-position (.spawn Super-position this))

  (gett data (lit (x this.x) (y this.y) (type this.type)))

  (def collapse ()
    (.collapse this.super-position)
    (return this.data)))

(def sleep (n) (make-promise (set-timeout resolve n)))

(define Chunk Grid-chunk
  (cached position-vector (.spawn Vector this.grid-x this.grid-y))

  (gett data (Array.from (.collapse this)))
  (gett heap this.grid.heap.heap)
  (gett parent-index (.get-parent-index Heapable this.index))
  (gett player-pos this.grid.player-pos)
  (gett distance-from-player
        (const dv (.distance-to this.player-pos this.position-vector))
        (const d (Math.abs (.get-length dv)))
        (.despawn dv)
        (return d))

  (def compare-to (chunk)
    (if (> this.distance-from-player chunk.distance-from-player)
        1
        -1))
  (def-generic* collapse ()

    (print "collapsing chunk" this)
    (if! this.collapsed (return))
    (assign this.collapsing true)

    ;; (const cells (.sort this.cells (-> (- (Math.random) (Math.random)))))
    (var cell (get this.cells (random-int this.cells.length)))
    (const visited (new Set))
    (while! cell
            (yield (.collapse cell))
            (.add visited cell)
            (const lowest-entropy-neighbor (.find cell.super-position.uncollapsed-neighbors
                                                  (=> (super-position)
                                                      (= super-position.cell.chunk this))))
            (if lowest-entropy-neighbor
                (assign cell lowest-entropy-neighbor.cell)
                (assign cell (.find this.cells (=> (cell) (not (.has visited cell)))))))
    ;; (for-of! cell this.cells
    ;;          (if! cell.type
    ;;               (print "previously collapsed cell detected")
    ;;               continue)
    ;;          (yield (.collapse cell)))
    (set this 'collapsed true
         'collapsing false)))

(export Tile)
(define Tile-grid Grid

  (init () (.call Grid.init this))

  (chunk-size 16)
  (overlap-factor 2)
  (Chunk Chunk)
  (Cell Tile)
  (search-radius 1)


  (def reset-search-radius () (assign this.search-radius 1))

  (def get-chunks-in-search-radius ()
    (.get-nearest-chunks this this.player-pos.x this.player-pos.y
                         this.search-radius))

  (def update-player-pos (pos)
    (when (!= (.get-nearest-chunk this pos.x pos.y)
              this.player-chunk)
      (.reset-search-radius this)
      (.heapify this.heap)
      (set this.player-pos
           'x pos.x
           'y pos.y)))

  (def collapse-area (x y w h))

  (def collapse-cell (x y) (.collapse (.get this x y)))

  (def collapse-chunk (x y) (get (.get-chunk this x y) 'data))

  (def collapse-nearest-chunk (x y) (get (.get-nearest-chunk this x y) 'data))

  (def collapse-cells (coords) (map coords (p) (.collapse (.get this p.x p.y))))

  (def collapse-nearest-chunks (x y n)
    (pipe (.get-nearest-chunks this x y n)
          (Array.from (=> (chunk) chunk.data))

          .flat)))

(export Tile-grid)

