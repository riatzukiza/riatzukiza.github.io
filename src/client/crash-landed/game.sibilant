(import Game "@shared/game.js")
(import Physics "@shared/systems/physics.js")
(import Player-sprites "@crash-landed/systems/sprites/player.js")
(import Props-sprites "@crash-landed/systems/sprites/basic-props.js")
(import Velocity "@shared/systems/velocity.js")
(import Sight "@crash-landed/systems/sight.js")
(import Ground-types "@crash-landed/systems/floor-type.js")
(import Tile-visibility "@crash-landed/systems/visibility.js")
(import Path-finding "@crash-landed/systems/path-finding.js")
(import Metabolisim "@crash-landed/systems/metabolisim.js")
(import Containers "@crash-landed/systems/containers.js")
(import Mental-state "@crash-landed/systems/mental-state.js")
(import Item "@crash-landed/systems/item.js")
(import config "@crash-landed/config.js")
(import Floor-sprites "@crash-landed/systems/sprites/floor.js")
(import Cliff-sprites "@crash-landed/systems/sprites/cliff.js")
(import Position "@shared/systems/position.js")
(import setup-tile "@crash-landed/world-gen/setup-tile.js")
(import Tile-graph "@shared/tiles.js")
(import get-cardinal-direction-name "@crash-landed/directions.js")

(import  Unit-group "@shared/units.js")
(import Player "@crash-landed/units.js")

(var active-game-systems [Position
                          Physics
                          Velocity
                          Tile-visibility
                          Sight
                          Floor-sprites
                          Cliff-sprites
                          Player-sprites
                          Props-sprites
                          Ground-types
                          Path-finding
                          Metabolisim
                          Containers
                          Mental-state
                          Item])



(var game null)

(import  Tile-generator "@crash-landed/world-gen/worker.js")


(const generator (.spawn Tile-generator))

(var player null)

(var p player)
(var v null)
(const game-scale config.game-scale)
(.start generator)

(on Game.events 'start ()

    (assign player (.spawn Player))
    (assign p player)
    (assign v  p.velocity.vector)

    (assign player.pos.x 0)
    (assign player.pos.y 0)

    (assign p.physics.scale config.game-scale)
    (set p.physics 'forces [])

    (.select-sequence p.sprite "east"))

(on Game.events 'load (save-name)
    (.load generator save-name))

(on Game.events 'save (save-name)
    (.save generator save-name))

(on Game.events 'tick (t)

    (if! (= (mod t 20) 0)
         (.step p.sprite))
    (if! (not generator.busy)
         (const nearest-tile (.get-closest-from-world-pos
                              game.tiles
                              p.pos.x p.pos.y))
         (print "sending nearest tile" p.pos nearest-tile)
         (pipe (.get-loaded-tiles generator nearest-tile)
               (then data
                     (each data.tiles (tile-data)
                           (setup-tile tile-data game.tiles)))))
    (const direction-name (get-cardinal-direction-name v))

    (.select-sequence p.sprite direction-name))

(const tile-systems [Floor-sprites Tile-visibility Ground-types Containers])
(def-async start-game ()

  (if! (not game)

       (assign game ((create Game) config active-game-systems config.game-speed))
       (const tiles (.spawn Tile-graph game-scale tile-systems game))

       (assign game.tiles tiles)

       (assign Unit-group.game game)
       (const initial-tiles (await (.get-starting-tiles generator 0 0 2)))

       (each initial-tiles.tiles (data)
             (setup-tile data tiles))
       )
  (assign Path-finding.tiles game.tiles)
  (Sight.register-tile-graph game.tiles)
  (.start game)
  )

(def-async save-game (save-name)
  (await (.save game save-name))
  (.emit game.events 'save save-name))

(def-async load-game (save-name)
  (assign game (await (.load Game save-name)))
  (.emit game.events 'load 'save-name))
(def get-game ()
  game)

(export get-game)
(export active-game-systems)
(export start-game)
(export load-game)
(export save-game)

