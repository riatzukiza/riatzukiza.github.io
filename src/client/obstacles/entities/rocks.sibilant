(require! Quad-tree  "@timohausmann/quadtree-js")

(import "/shared/systems/rendering/dot.js")
(import Position "/client/obstacles/systems/position.js")
(import Velocity "/client/obstacles/systems/velocity.js")
(import Physics "/shared/systems/physics.js")
(import Component System Entity-group "/shared/ecs.js")
(import Group "/shared/data-structures/group.js")
(import List "/shared/data-structures/list.js")
(import Vector "/shared/vectors.js")

(import Trie "/shared/data-structures/trees/trie.js")
(import Collision place-entity "/shared/systems/collision.js")
(import Friction "/client/obstacles/forces.js")
(import game active-game-systems "/client/obstacles/game.js")

(import Rock-sprites "/client/obstacles/systems/rock-sprites.js")
(import rgba "/client/obstacles/colors.js")
(import config "/client/obstacles/config.js")




(const rocks ((create Entity-group) "Rocks" [Rock-sprites, Position, Physics, Collision, Velocity]
              game.ent))


(const rock-placement-vector (.spawn Vector 0 0 ))
(const rock-scale-variation (-  config.rock-max-size config.rock-min-size))
(const rock-mass-variation (-  config.rock-max-mass-factor config.rock-min-mass-factor))

(const max-rock-base-mass (* config.rock-mass-scaling-factor config.rock-max-mass-factor))
(const min-rock-base-mass (* config.rock-mass-scaling-factor config.rock-min-mass-factor))

(const max-rock-density (/ (* config.rock-min-size max-rock-base-mass)
                           (Math.pow config.rock-min-size 3)))

(const min-rock-density (/ (* config.rock-max-size max-rock-base-mass)
                           (Math.pow config.rock-max-size 3)))

(def spawn-rock ([x, y], mass, scale)
  (print "spawning rock")
  (var rock (.spawn rocks [Rock-sprites, Position, Physics, Collision, Velocity]))

  (const pos (.get game.systems Position rock))
  (set pos 'x x 'y y 'z 0)

  (const phys (.get game.systems Physics rock))
  (set phys 'mass mass 'scale scale 'forces [Friction])
  (const velocity phys.velocity)
  ;; (const xd (random-signed config.spawn-static))
  ;; (const yd (random-signed config.spawn-static))
  ;; (set velocity 'xd xd 'yd yd)


  (var hardness (Math.max 60 (Math.min 225 (Math.round (/    max-rock-density phys.density)))))



  (place-entity rock game config))
(var last-rock-pos [(random-float (first config.dimensions) )
                    (random-float (second config.dimensions) )])

(def-generic rock-gen-step ((position last-rock-pos)
                            (mass (+ config.rock-min-mass-factor
                                     (random-float rock-mass-variation)))
                            (scale (+ config.rock-min-size
                                      (random-float rock-scale-variation))))



  (spawn-rock position
              (* config.rock-mass-scaling-factor scale mass)
              scale)

  (.rotate-to rock-placement-vector (* 5 (Math.random)))
  (.set-length rock-placement-vector (* (random-float 50) scale))
  (assign last-rock-pos [(mod (Math.abs (+ (get position 0) rock-placement-vector.x)) (first config.dimensions))
                         (mod (Math.abs (+ (get position 1) rock-placement-vector.y )) (second config.dimensions))])
  )
(export rocks)
(export spawn-rock)
(export rock-gen-step)
