(include "../../../inc/dom.sibilant")
(import simplex3 simplex2 "@shared/noise.js")
(import Vector-2D-phase-space "@simple-gravity/typed-arrays/vector-2d.js")
(import Double-buffered-array "@simple-gravity/typed-arrays/double-buffered.js")
(import rendering vertex-layer "@simple-gravity/rendering.js")
(import Thread "@shared/worker.js")
(import config "@simple-gravity/config.js")
(import Ticker "@shared/ticker.js")
(import Vector "@shared/vectors.js")
(import Data-type "@simple-gravity/data-types/data-type.js")
(import game-view start-button "@simple-gravity/ui.js")

(define Threaded-system Thread
  (data [])
  (def update (args)
    (.send this (lit args (buffers (map this.data (data)
                                   [data.current-state.buffer
                                    data.next-state.buffer]))))))

(define Physical-property Data-type
  (keys ['mass 'scale])
  )
(define Physical-properties Double-buffered-array
  (data-type Physical-property))

(const (lit spawn-width spawn-height
            dimensions

            particle-count

            max-mass min-mass
            actual-maximum-mass

            particle-render-size


            ) config)


(const velocities (.spawn Vector-2D-phase-space particle-count))
(const attractors (.spawn Vector-2D-phase-space particle-count))
(const physical-properties (.spawn Physical-properties particle-count))

(const positions (.spawn Vector-2D-phase-space  particle-count ))
(const vertices (vertex-layer particle-count))


(define Movement-system Threaded-system
  (url (+ "@simple-gravity/workers/movement.js"))
  (data [velocities positions attractors]))


(define Attractor-system Threaded-system
  (url "@simple-gravity/workers/attractors.js")
  (data [velocities positions attractors physical-properties]))



(def initialize-motes (positions verts)
  (for-of! p positions.data
           (const phys (get physical-properties.data p.id))
           (set (get verts p.id 'color) 'r 255 'g 10 'b 10 'a 255)
           (set  (get verts p.id)

                 'size phys.scale
                 'intensity phys.scale
                 )
           (set (get verts p.id 'point)
                'x p.x
                'y p.y
                'z 1))
  null)

(const random-signed-float (=> (range) (random-float (* -1 range) range)))
(def randomly-place-particles ()
  (const spawn-pos (.spawn Vector 0 0)
         )
  (for-of! p positions.data

           (const phys (get physical-properties.data p.id))

           (var scale (* max-mass (Math.random)))
           (var mass (Math.max min-mass (Math.pow  scale 3)))
           (set phys 'mass mass 'scale scale)

           (.add-to spawn-pos (lit (x (* (/ mass actual-maximum-mass)
                                         (random-signed-float spawn-width)))
                                   (y (* (/  mass actual-maximum-mass)
                                         (random-signed-float spawn-height)))))

           (assign p.x spawn-pos.x)
           (assign p.y spawn-pos.y))
  null)

(def get-bounds (positions)
  (var min-x 0 min-y 0 max-x 0 max-y 0)
  (for-of! p positions.data
           (if (< p.x min-x) (assign min-x p.x))
           (if (< p.y min-y) (assign min-y p.y))

           (if (> p.x max-x) (assign max-x p.x))
           (if (> p.y max-y) (assign max-y p.y)))
  (return [min-x min-y max-x max-y]))


(randomly-place-particles)

(.step physical-properties)

(.step positions)

(.step velocities)

(initialize-motes positions vertices)


(.update rendering)

(def wait (n) (make-promise (set-timeout resolve n) ))
(def-async draw ()
  (while! true
          (await (make-promise
                  (request-animation-frame (-> (.update rendering)
                                               (resolve))))))
  (return null))

(def-async main ()

  (.init Movement-system)
  (.init Attractor-system)

  (.start Movement-system)
  (.start Attractor-system)
  (const drawer (draw)) ;; heh

  (var promise (Promise.resolve))
  (while! true
          (await (Promise.all
                  [ (.update Attractor-system (lit (bounds (get-bounds positions))))
                   (.update Movement-system )  ]))

          (.step positions)
          (.step attractors)

          (for-of! p positions.data
                   (const v (get velocities.data p.id))
                   (const a (get attractors.data p.id))
                   (const phys (get physical-properties.data p.id))
                   (set (get vertices p.id 'color)
                        'b (Math.min 255 (Math.abs (Math.round (* 32 a.x))))
                        'g (Math.min 255 (Math.abs (Math.round (* 32 a.y))))
                        )
                   (set (get vertices p.id 'point)
                        'x p.x
                        'y p.y)))
  (return null))

(with-dom Document-body
  (.div .id 'frame (.div .id "container"
                         game-view
                         (.div .id "debug-view" .className "panel"
                               .style (lit (height (+  (second dimensions)"px"))
                                           (width (+ (Math.round (- (* window.innerWidth 0.2) 42)) "px"))
                                           ("overflow-y" "scroll"))
                               (start-button main)
                               ))))


