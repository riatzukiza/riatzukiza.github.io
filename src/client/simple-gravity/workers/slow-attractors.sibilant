
(meta "import '/bundles/external.js'")

(import Vector-2D-phase-space "../typed-arrays/vector-2d.js")
(import Double-buffered-array "../typed-arrays/double-buffered.js")

(import Data-type "../data-types/data-type.js")

(import Vector "/shared/vectors.js")
(import Spawnable "/shared/data-structures/spawnable.js")

(require! Quad-tree  "@timohausmann/quadtree-js")


(const gravitational-constant 0.00000001)
(const min-dist 1)
(const particle-size 512)

(define Physical-property Data-type
  (keys ['mass ])
  )
(define Physical-properties Double-buffered-array
  (data-type Physical-property)
  )

(define Particle Spawnable
  (init (pos-source
         attractor
         mass
         (x pos-source.x)
         (y pos-source.y)
         (height 256)
         (width 256)

         (pos (.spawn Vector pos-source.x pos-source.y))
         (vel (.spawn Vector attractor.x attractor.y))))
  (def clear ()
    (assign this.pos-source null)
    (.despawn this.pos)
    (.despawn this.vel)
    (assign this.pos null)
    (assign this.vel null)
    (assign this.width null)
    (assign this.height null)
    )

  (gett id this.pos-source.id))
(def self.onmessage (e)
  (const [[vb1 vb2] [pb1 pb2] [ab1 ab2] [mb1 mb2]] e.data.buffers)

  (const velocities (.from-buffers Vector-2D-phase-space vb1 vb2))
  (const positions (.from-buffers Vector-2D-phase-space pb1 pb2))
  (const attractors (.from-buffers Vector-2D-phase-space ab1 ab2))
  (const masses (.from-buffers Physical-properties mb1 mb2))

  (const particles [])
  (var min-mass 0)
  (var max-mass 0)
  (for-of! pos positions.data
           (const attractor (get attractors.data pos.id))
           (const mass (get masses.data pos.id 'mass))
           (assign min-mass (Math.min min-mass mass))
           (assign max-mass (Math.max max-mass mass))
           (const particle (lit (x pos.x) (y pos.y)
                                (id pos.id)
                                (pos-source pos) mass attractor
                                (pos (.spawn Vector pos.x pos.y))
                                (vel (.spawn Vector 0 0))
                                (height 256)
                                (width 256)))
           (.push particles particle)
           )


  (loop (for-of! p1 particles)
   (for-of! p2 particles


            (if! (= p1.id p2.id) continue)
            (const dist (.distance-to  p2.pos p1.pos))
            (const used-distance (Math.max min-dist (Math.abs (.get-length dist))))
            (const mag (Math.sqrt (+ (* dist.x dist.x)
                                     (* dist.y dist.y))))
            (const intensity (/ (* gravitational-constant  p2.mass used-distance)
                                (Math.pow mag 2)))

            (.set-length dist intensity)
            (.add-to p1.vel dist)
            (.despawn dist)))
  (for-of! p particles
           (.add-to p.attractor p.vel)
           (.despawn p.vel )
           (.despawn p.pos)
            )


  ;; (.add-to positions velocities)
  (.post-message self [[vb1 pb1] [vb2 pb2] [ab1 ab2]])


  ;; (.pause Atomics)
  ;; (.wait Atomics (new Big-int64-array vb2))

  (.despawn velocities)
  (.despawn positions)
  (.despawn attractors)
  (.despawn masses)
  )
