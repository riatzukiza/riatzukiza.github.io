(meta "import '/bundles/external.js'")
(import simplex3 "@shared/noise.js")
(import Vector "@shared/vectors.js")

(import Vector-2D-phase-space "@simple-gravity/typed-arrays/vector-2d.js")

;; const angle=(noise.simplex3((pos.x / config.angleZoom / 5), (pos.y / config.angleZoom / 5), (tick * (config.noiseZ / 10000))) * Math.PI * 2);

;; const length=((noise.simplex3(((pos.x / 50) + 40000), ((pos.x / 50) + 40000), (tick * (config.noiseZ / 10000))) * config.fieldForce) / 20);

(def-generic set-move-noise (v x y (t 0) (force 0.01) (angle-zoom 1000) (noise-z 100))
  (const v* (.spawn Vector))
  (const z (/ noiseZ 10000))
  (const angle (*  (simplex3 (/ angle-zoom x 5)
                             (/ angle-zoom y 5)
                             (* t z)) Math.PI 2))
  (const length (/ (* (simplex3 (+ (/ x 50) 40000) (+ (/ y 50) 40000) (* t z))
                      force) 20))
  (.set-length v*  length )
  (.set-angle v* angle)
  (.add-to v v*)
  (.despawn v*)
  )

(var i 0)
(def self.onmessage (e)
  (const [[vb1 vb2] [pb1 pb2]] e.data.buffers)

  (const velocities (.from-buffers Vector-2D-phase-space vb1 vb2))
  (const positions (.from-buffers Vector-2D-phase-space pb1 pb2))

  (for-of! v* velocities.data
           (const p (get positions.data v*.id))
           (set-move-noise v* p.x p.y i)
           )
  (incr i)
  (.post-message self [[vb1 pb1] [vb2 pb2]])
  ;; (.despawn velocities)
  ;; (.despawn positions)

  null)
