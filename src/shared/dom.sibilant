
(import Event-emitter "./kit/events/index.js")
(macro instance-of? (item type)
       ["("  type " " 'instanceof " "item ")"])
(require! R 'ramda)

(def-curried render-children ( *parent c i a)
  (if (undefined? c) null

      c.render (.render c *parent)

      (array? c) (.each c (render-children *parent))

      (string? c) (.append-child *parent.*node (.create-text-node document c))

      (number? c) (.append-child *parent.*node (.create-text-node document (+ "" c)))

      (function? c) (render-children *parent (c *parent) i a)

      (instance-of? Element c) (let ((node (.wrap Document-node c *parent.*node)))
                                 (set a i node)
                                 (render-children *parent  node i a))

      (.append-child *parent.*node c)))
(export render-children)

;; (specify Document (extend Event-emitter.prototype))
;; (def-describe Document (*root *tree))

(define Document-node Event-emitter
  (init (tag-name
         attributes
         (*children [])
         *parent

         (*node (document.create-element tag-name)))
        (.call Event-emitter.init this))


  (gett children this.*children)
  (gett style this.*node.style)

  (def-generic clear (*node)
    (assign *node.innerHTML "") this)


  (def-generic render (*parent attributes tag-name *node children)

    ;; (print "rendering" (lit *parent attributes tag-name *node children))
    ;; (when *node (.remove this *node *parent))
    (assign *node.innerHTML "")
    ;; The first time the parent is right, the next time the parent is somthing else.

    (when *parent
      (assign this.*parent *parent)
      (.append-child *parent.*node *node))


    (each attributes (a k)
          (if (= k  "style")
              (each a (a* k*) (set this.style k* a*))
              (set *node k a)))

    (pipe children (.each  (render-children this)))
    (.emit this 'render )

    this)

  (def wrap (*node *parent)
    "create a Document-node from a native DOM Element"
    ((create Document-node) *node.tag-name {} [] *parent *node))

  (def-generic append (node children)
    "add a child to the bottom of this one"
    (.push children node)
    this)

  (def-generic prepend (node children)
    "add a child to the top of this one"
    (assign this.children [node children]))

  (def-generic remove (*node *parent)
    "remove this element from the tree."

    (.remove *node)
    (assign this.*parent null)

    (when *parent
      (.filter *parent.children (=> (c) (not (= *node c))))
      (.emit *parent 'remove *node))
    this))
(export Document-node)

(define Document-root  Document-node
  (gett *parent this)
  (tag-name "html")
  (*node document.document-element)
  (*children []))
(export Document-root)


(define Document-body  Document-node
  (gett *parent this)
  (tag-name "body")
  (gett *node document.body)
  (*children []))




(define Document-head  Document-node
  (gett *parent this)
  (tag-name "head")
  (*node document.head)
  (*children [])
  )
(export Document-head)
(export Document-body)

(var create-document-node (create Document-node))
(export create-document-node)
