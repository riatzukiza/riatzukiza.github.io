
(macro accumulate (name ...body) `(assign @name (pipe @name ...@body)))

(require! R "ramda")

(import Saveable "/shared/saveable.js")
(import Ordered-map "../data-structures/maps/ordered.js")
(import Group "../data-structures/group.js")
(import Interface "/shared/kit/interface/index.js")
(import Renderable "/shared/systems/rendering/renderable.js")


(def spawn-component  (entity systems) (#-> systems.get (.spawn  entity)))

(def component-list  (entity) (R.map (spawn-component entity)))

(def remove (entity) (#-> (get 'system) (.clear entity)))

(var clear (#->  .clear))
(def capitalize (string) (+ (.to-upper-case (.char-at string 0)) (.slice string 1)))
(def decapitalize (string) (+ (.to-lower-case (.char-at string 0)) (.slice string 1)))

(define Component Saveable
  
  (def register ()
    (doc-string "shared.ecs.Component.register"
                "no arguements"
                "An abstract function for subclassed components to optionally perform an action on creation."))

  (init (entity system)
        (set entity (.to-lower-case this.name) this)
        (set entity this.name this)
        (set entity (decapitalize this.name) this)
        (.register this)))


(def-generic Component.clear (system)

  (if (not this.*clear)
      (throw (new Error "Clear function must be defined to relase from object pool.")))
  (this.*clear)
  (set this.entity (.to-lower-case this.name) null)
  (set this.entity this.name null)
  (set this.entity (decapitalize this.name) null))

(export Component)
