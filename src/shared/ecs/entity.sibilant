
(macro accumulate (name ...body) `(assign @name (pipe @name ...@body)))

(require! R "ramda")

(import Spawnable "../data-structures/spawnable.js")
(import Ordered-map "../data-structures/maps/ordered.js")
(import Dynamic-pool "../pooling/dynamic-pool.js")
(import Group "../data-structures/group.js")
(import Interface "/shared/kit/interface/index.js")

(import Saveable "/shared/saveable.js")


(def spawn-component  (entity systems) (#-> systems.get (.spawn  entity)))

(def component-list  (entity) (R.map (spawn-component entity)))

(def remove (entity) (#-> (get 'system) (.clear entity)))

(var clear (#->  .clear))
(define Entity Spawnable

  (doc "used as a key to retrieve related components from different systems.")


  (init (aspects (components (map aspects (aspect i)
                                  (pipe this.game.systems
                                        (.get aspect)
                                        (.spawn this))))))
  (gett entity this)

  (def-generic clear (entity components )
    (.each entity.components (remove entity))
    (assign entity.id null)))



(export Entity)
