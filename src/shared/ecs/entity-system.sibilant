(macro accumulate (name ...body) `(assign @name (pipe @name ...@body)))

(require! R "ramda")

(import Ordered-map "../data-structures/maps/ordered.js")
(import Dynamic-pool "../pooling/dynamic-pool.js")
(import Group "../data-structures/group.js")
(import Entity "./entity.js")
(import Interface "/shared/kit/interface/index.js")
(import Saveable "/shared/saveable.js")

(def spawn-component  (entity systems) (#-> systems.get (.spawn  entity)))

(def component-list  (entity) (R.map (spawn-component entity)))

(def remove (entity) (#-> (get 'system) (.clear entity)))

(var clear (#->  .clear))
(define Entity-system Saveable
  (current-id 0)
  (init (process (pool ((create Dynamic-pool) Entity 256))))
  (gett game this.process)

  (def clear () (.clear this.pool))

  (def spawn (aspects )
    (.spawn this.pool this (incr this.current-id) aspects )))


(export Entity-system)
