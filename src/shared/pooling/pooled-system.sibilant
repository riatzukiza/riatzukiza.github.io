(import Dynamic-pool "./dynamic-pool.js")
(import Interface "../kit/interface/index.js")


(define  Pooled-system  Interface
  (init ( Interface (*pool ((create Dynamic-pool) Interface)))
        (.register this Interface))

  (systems (new Map))

  (def-generic clear (*pooled)
    (.each *pooled (feach despawned))
    (.clear *pooled))

  (def spawn ((dots args))

       "aquire an object from the systems pool, and initialize it."

       (collect r (pipe this.*pool (.aquire))
                (.init r (dots args))))

  (def despawn (obj)
       "remove an object from the system, and release it back into the pool."

       (.clear obj)
       (pipe this.*pool
             (.release obj)))

  (def register (Interface)

       "Associate a Interfacetype interface with a system,and add the system to the collection of all active systems."

       (assign Interface.system this)

       (.set this.systems this this))

  (def update ()

       "update every active member of the system"

       (each this.*pool.*in-use (member)
             (.update member))))
(export Pooled-system)
