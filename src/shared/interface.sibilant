(namespace interface)

(include "../../headers/core.sibilant")

(import-namespace kit)
(include "../../headers/interface.sibilant")

(def-generic define
    (interface-name
     *obj *types *symbols
     ( *shares (or *obj.borrows *obj.shares []))
     ( *ext (or *obj.extend this))
     ( *build *obj.build))

  (if (in  *symbols interface-name)

      (mixin *obj (get *types (get *symbols interface-name)))
      (.*construct  Interface interface-name *obj *ext *shares *symbols *types *build)))

(def-generic *construct (interface-name *obj *ext *shares *symbols *types *build)
  (const shares [ (dots *shares)
                  (lit interface-name
                       (symbol (Symbol interface-name))
                       (define Interface.define)
                       (proto *ext)
                       (*construct Interface.*construct))])
  (collect proto (extend  *ext (mixin  
                                       *obj))
           (def proto.construct ()
             (.init (Object.create proto)
                    (dots arguments)))

           (.call Interface.init proto)

           (.set *symbols proto proto.symbol)
           (.set *types  proto.symbol proto)

           (if proto.build (.build proto ))

           proto))
(def-object Interface ()

  ( *symbols (new Map))

  ( *interfaces (new Map))
  (cached)
  (init (interface-name *obj (*types {}) (*symbols {})))
  (gett name this.interface-name)
  (gett type-name this.interface-name)
  define
  *construct
  )
(var Interface
     )



(export Interface)
