(import Spawnable "./data-structures/spawnable.js")
(import Entity-group "./ecs.js")
(import Position "./systems/position.js")
(import Physics "./systems/physics.js")
(import Interface "/shared/kit/interface/index.js")
(import Saveable "/shared/saveable.js")

(define Unit-instance Spawnable
  (init (entity group))
  (gett game this.group.game)
  (gett pos this.entity.position-interface)
  (gett physics this.entity.physical-properties)
  (gett scale this.physics.scale)
  (gett mass this.physics.mass)
  (def register ())
  (def clear ()
    (assign this.unit null
            this.group null)))
(export Unit-instance)

(define Unit-group Saveable
  (doc-string "Shared.Units.Unit-group"
              "

Name: Name of the unit group
types: A list of lists of components
Game: A game instance.
groups (optional): A list of entity groups associated with units in this group.
Allows for easy cross entity interactions.
Components: A list of components
"
              "
A physical thing in the world which interacts with other units.

There can be several types of units in a game, the most basic we will be considering for now are dynamic and static.

The only difference is one can move and the other cannot.

Possibilities for other distinctions later are:
Destructable
Neutral

"
              "
We've chosen to implement this layer of abstraction as an encapsulation of entity groups rather than an extension as we use the entity group and language around it on previous projects, and we don't want to break other projects just to implement this right here and now.

This may change as these are to be used instead of entity groups for the most part instead of along side. Though we may decide differntly.
"
              )
  (init (group-name component-types))

  (base-components [Position Physics])
  (instance-interface Unit-instance)
  (template true)

  (cached components (.flat [this.component-types this.base-components]))
  (cached group ((create Entity-group)
          (+ this.group-name "Unit")
          this.components
          this.game.ent))

  (def build ()
    (if (not this.template)
        (do (.init this)
            )
        )
    )
  (def spawn (...args)
    (const entity (.spawn this.group))
    (const unit (.spawn this.instance-interface entity this))
    (assign entity.unit unit)
    (for-of! c entity.components
             (assign c.unit unit))
    (.register unit ...args)
    (return unit))

  (def despawn (unit)
    (for-of! c unit.entity.components
             (assign c.unit null))
    (.despawn this.group unit.entity)
    (.despawn unit)))

(export Unit-group)
