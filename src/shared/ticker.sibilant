(import Event-emitter "./kit/events/index.js")
(import List "./data-structures/list.js")
(import Interface "/shared/kit/interface/index.js")
(import Saveable "/shared/saveable.js")
(define Ticker Saveable

  (state false)
  (ticks 0)

  (events ((create Event-emitter)))
  (gett rate (/ 1000 this.fps))
  (gett average-latency (/ (.reduce this.latency-accumulator
                                    (=> (sum n) (+ sum n))
                                    0)
                           this.latency-accumulator.length))

  (gett average-fps (Math.round (/ 1000 this.average-latency )))
  (init (fps (latency-accumulator ((create List)))))

  (def-generic update (previous rate)

    (when this.state

      (var now (Date.now))

      (assign this.elapsed (- now previous))

      (set-timeout (-> (this.update  )))

      (when (> this.elapsed rate)

        (.push this.latency-accumulator this.elapsed)
        (if (< 20 this.latency-accumulator.length)
            (.shift this.latency-accumulator))

        (++ this.ticks)
        (assign this.previous now)

        (this.events.emit 'tick  this.ticks ))) this)

  (def start ()

       (set this
            'state true
            'previous (Date.now))

       (this.update))

  (def stop ()
       (assign this.state false)
       this))

(export Ticker)
