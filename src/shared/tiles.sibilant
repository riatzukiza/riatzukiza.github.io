(import Spawnable "./data-structures/spawnable.js")
(import Trie "./data-structures/trees/trie.js")
(import Entity-group "./ecs.js")
(import Position "./systems/position.js")
(import Physics "./systems/physics.js")

(define Tile-node Spawnable
  (init (*x *y entity graph )
        (set entity.position-interface
             'x (* this.graph.tile-size *x)
             'y (* this.graph.tile-size *y)))

  (def setup ()
    (throw (new Error "No tile setup function defined")))
  (gett world-pos this.entity.position-interface)
  (gett x this.*x)
  (gett y this.*y)


  (gett world-x this.pos.x)
  (gett world-y this.pos.y)

  (gett tile-size this.graph.tile-size)

  (gett north (.get this.graph this.x (+ this.y 1)))
  (gett south (.get this.graph this.x (- this.y 1)))
  (gett east  (.get this.graph (+ this.x 1) this.y))
  (gett west (.get this.graph (- this.x 1) this.y))

  (gett north-east (.get this.graph (+ this.x 1) (+ this.y 1)))
  (gett north-west (.get this.graph (- this.x 1) (+ this.y 1)))
  (gett south-east (.get this.graph (+ this.x 1) (- this.y 1)))
  (gett south-west (.get this.graph (- this.x 1) (- this.y 1)))
  (gett edges [this.north
               this.south
               this.east
               this.west
               this.north-east
               this.north-west
               this.south-east
               this.south-west
               ])
  (def-generic traverse-area (f n  (visited (new Set)))
    (for! (x (- this.x n)) (<= x (+ this.x n) ) (++ x)
          (for! (y (- this.y n)) (<= y (+ this.y n) ) (++ y)
                (const tile (.get this.graph x y))
                (f tile x y)
                ))

    this))

(export Tile-node)
(define Tile-graph Spawnable
  (init ((tile-size 30)
         (tile-properties [])
         game
         (trie (.spawn Trie))
         (tile-entities ((create Entity-group)
                         "tiles"
                         [Position Physics ...tile-properties ]
                         game.ent))))

  (def get-closest-from-world-pos (x y)
    (.get this (Math.round (/ x this.tile-size))
          (Math.round (/ y this.tile-size))))
  (def get (x y)
    (if (.has this.trie [x y])
        (.get this.trie [x y])
        (do (const entity (.spawn this.tile-entities))
            (assign entity.physical-properties.scale (-  this.tile-size 2))
            (const tile (.spawn Tile-node x y entity this))
          (.set this.trie [x y] tile)))))

(export Tile-graph)
