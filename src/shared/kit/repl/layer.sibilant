(namespace repl)

(include "../../../../headers/repl.sibilant"
         "../../../../headers/interface.sibilant"
         "../../../../headers/core")

(import-namespace core)
(import-namespace interface )
(import-namespace events)

(import Interface "../interface/index.js")
(import Actor "../actor/index.js")
(import emit "../events/index.js")

(var curry R.curry)

(define Layer Actor

  (init ( types (members (.map types (=> (t) ((create t))))))
        (each types (t i) (set this t.symbol (get members i)))
        (.call Actor.init this))

  (gett assign-handlers
        (=> (a i)
            (var members this.members)
            (pipe a
                  (.on 'message (R.pipe
                                 (send-to (get this.members (+ i 1)))))
                  (bubble  this 'error))))

  (def-generic *send (d members)
    (.send (first members) d))

  (def-generic start (members)

    (fluently

     (var last (last members)
          inner (.slice members 0 -1))

     (.for-each inner this.assign-handlers)

     (bubble  last this 'message )))

  (def of (types) (extend this (lit types))))

(export Layer)


