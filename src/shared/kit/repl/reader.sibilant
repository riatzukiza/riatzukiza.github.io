(namespace repl)

(include "../../../../headers/repl.sibilant"
         "../../../../headers/interface.sibilant"
         "../../../../headers/core")

(import-namespace core)
(import-namespace interface )
(import-namespace events)

(import Interface "../interface/index.js")
(import Actor "../actor/index.js")
(import emit "../events/index.js")


(def scanning? (parser) (not (or parser.in-quote parser.comment)))

(var readers
     (lit
      ("\"" (lambda (c) (assign this.in-quote (not this.in-quote)) c))
      (";" (lambda (c) (if this.in-quote c
                           (do (assign this.comment true)
                               "")) ))))

(macro reader-macro (name ...body)
       `(set readers @name
             (lambda (char) ...@body)))

(macro validator (name ...body)
       `(reader-macro @name
                      (if (scanning? this)
                          (do ...@body char)
                        char)))


(validator "("   (incr this.parens) )
(validator ")"   (decr this.parens) )

(validator "["   (incr this.square-braces))
(validator "]"   (decr this.square-braces))

(validator "{"   (incr this.curly-braces))
(validator "}"   (decr this.curly-braces))

(define Reader Actor

  (init ((fragment [])
         (parens 0)
         (square-braces 0)
         (curly-braces 0)
         (in-quote? false))
        (.call Actor.init this))

  (parsers (new Map))

  (def spawn (compiler)
    (remember this.parsers compiler
              (.start ((create Parser)))))

  (def-generic *send (string fragment)

    (var lines (.split string "\n"))

    (each lines (line)
          (var looping true i 0)
          (var chars (.split line ""))

          (assign this.comment false)

          (while (and looping (not this.comment))
            (var char (get chars (incr i)))

            (if (get readers char)
                (assign char (.call (get readers char ) this char chars i)))

            (when looping

              (.push this.fragment char)

              (when (and (not this.parens)
                         (not this.curly-braces)
                         (not this.square-braces))

                (var s (pipe (.join this.fragment "")
                             .trim ))

                (if (not (= s.length 0))
                    (.emit this 'message s))

                (assign this.fragment []))

              (if (>= i chars.length)
                  (assign looping false))))
          (.push this.fragment "\n"))))



(export Reader)
