(namespace repl)


(include "../../../../headers/repl.sibilant"
         "../../../../headers/interface.sibilant"
         "../../../../headers/core")

(import-namespace core)
(import-namespace interface )
(import-namespace events)

(import Interface "../interface/index.js")
(import Actor "../actor/index.js")
(import emit "../events/index.js")

(require! (lit inspect) 'util
          'vm)


(var id 0)
(def-curried run-in ( string )
  (doc-string "repl.run-in" "string"
             "Execute JavaScript in the VM context with an incrementing filename for debugging.")
  (.run-in-this-context vm  string (lit (filename ("kit" (incr id))))))



(define Evaluator Actor

  (init ()
        (doc-string "repl.Evaluator.init" ""
                   "Initialize the Evaluator actor.")
        (.call Actor.init this))

  (def-generic spawn ()
    (doc-string "repl.Evaluator.spawn" ""
               "Create a new Evaluator instance.")
    ((create this)))
  (def-generic *send (js context)
    (doc-string "repl.Evaluator.*send" "js context"
               "Evaluate JavaScript and emit the result or error as a message.")
    (pipe (Promise.resolve js)
          (.then  run-in)
          (.then (=> (result) (.emit this 'message ['result result]))
                 result)
          (.catch (=> (err) (.emit this 'message ['error err])
                      (throw err))))))

(export Evaluator)
