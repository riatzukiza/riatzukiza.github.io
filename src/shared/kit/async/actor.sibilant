(namespace actor)

(include "../../../../headers/core"
         "../../../../headers/interface")

(import-namespace kit)

(import  emit bubble Event-emitter "./event-emitter.js")
(import Interface "../interface/index.js")

(macro def-actor (name args ...body)
       `(def-interface @name @args
          (extend Actor)
          (init (.call Actor.init this))
          ...@body))

(macro enque-task (p ...body)
       `(assign @p (pipe @p
                         (then-do  ...@body)
                         (catch (.emit this 'error e)
                           (throw e)))))

(macro def-task (name args ...body)
       `(def-generic @name @args (enque-task this.promise ...@body)))

(def-lit-macro def-task (name args ...body)
  `(gmth @name @args
         (enque-task this.promise ...@body)))

(def-lit-macro def-task (name args ...body)
  `(gmth @name @args
         (enque-task this.promise ...@body)))

(import-namespace interface)

(def resolve (v)  (.resolve Promise v))

(def-curried send-to ( actor msg)
  (.send actor msg))

(define Actor Event-emitter

  (init ((promise (resolve)))
        (.call Event-emitter.init this)
        (.on this 'error (=> (e) (assign this.promise (resolve)))))

  (def *send (msg) (.emit this 'message msg))
  (def send (msg) (enque-task this.promise (.*send this msg))))

(export Actor)
(export send-to)
