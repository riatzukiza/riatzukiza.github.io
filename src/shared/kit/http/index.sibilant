(namespace http)

(include "../../../../headers/core.sibilant")
(import-namespace kit)

(include "../../../../headers/interface.sibilant")
(import-namespace interface)

(include "../../../../headers/async.sibilant")
(import-namespace async)

(include "../../../../headers/http.sibilant")

(import Trie "../../data-structures/trees/trie.js")

(require! 'http 'url)
(const Tree-map Trie)

(def parse (path)
  (let ((parsed-url (.parse url path )))
    (mixin parsed-url
           (lit (key (.split parsed-url.pathname "/"))))))

;; (macro def-route (path ...body)
;;        "sugar for adding a route."
;;        `(.add  app @path (=> (req res route) ...@body)))


(define Http Interface

  (def get (config)
       (make-promise
        (.on (.get http config success) 'error fail)))

  (def request (config)
    (var request (.request http config))
    (lit request
         (response (make-promise
                    (pipe (.on request 'response success)
                          (.on 'error fail)))))))
(assign module.exports Http)
(define Http.Request Interface
  (init (config)))


(define Http.Message Interface
  (init (request response))

  (gett url (parse this.request.url))

  (gett path this.url.pathname)

  (gett key (.split this.path "/")))

(var not-found-404 (#-> (get 'response)
                        (tap (set 'status-code 404
                                  'status-message "Not found"))
                        (.end "resource not found.")))

(define Middle-ware Interface

  (init ((router ((create Router)))))

  (def *parse-key (k) k)

  (def use (k handler)
    (var key (.*parse-key this k))
    (assign handler.key key)
    (.add this.router key
          handler))

  (def send (message)

    (.send this.router message)))

(define Http.Middle-ware Middle-ware

  (def *parse-key (path) (.split path "/"))

  (init ((router ((create Router))))
        (.add router  "" not-found-404)
        (pipe router.events
              (.on 'no-route not-found-404)
              (.on 'empty-key not-found-404)
              )))
(def key-of (path)
  (get (parse path) 'key))

(define Router Interface
  (init ( (*tree ((create Tree-map)))
          (events ((create Event-emitter)))))
  (def start () (.init this))

  (def send (message)

    (var route (.find this message.key))

    (assign message.route route)

    (if (not (or (and route route.value)))
        (.emit this.events 'no-route message)

        (not route.value.key)
        (.emit this.events 'empty-key message)

        ((cond (-> (function? route.value))
               (#-> route.value  )
               (-> (function? route.value.send))
               (#->  route.value.send ))
         (extend message (lit (key (.slice message.key route.value.key.length)))))))

  (def-generic add (key handler *tree)

    "introduce a new routing node to the tree."

    (.set  *tree key handler)
    this)

  (def-generic find (key *tree )
    "locate a route given an array of keys"

    (let* ((s (first key))
           (child (.get *tree.*children s)))
      (if child
          (.find Router (rest key) child)
          *tree)))

  (def-generic stop ()))

(export Router)

(define Read-stream Interface

  (init (stream))

  (def-generic reduce (f value stream )
    (pipe Read-stream
          (.each (=> (chunk) (assign value (f value chunk))) stream)
          (.then (-> value))))

  (def-generic each (f stream)
    (make-promise
     (pipe stream
           (.on  'data f)
           (.on 'error fail)
           (.on 'end success))))

  (def-generic drain (stream)
    (.reduce Read-stream (=> (value chunk) (+ value chunk)) "" stream)))

(define Http.Server Interface

  (init (port (*server (.create-server http ))
              (*middle-wares [])))

  (gett events this.*server)
  (gett event this.*server)

  (def start ()

       (.listen this.*server this.port)

       (.on this.*server 'request
            (=> (req res)
                (var message ((create Http.Message ) req res))
                (.for-each this.*middle-wares
                           (=> (m) (.send m message))))))

  (def use (middle-ware) (.push this.*middle-wares middle-ware)))
