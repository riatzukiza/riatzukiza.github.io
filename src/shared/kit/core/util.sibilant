(namespace kit)
(include "../../../../headers/core.sibilant")
(import-namespace kit)

(require! R "ramda")

(const create (=> (source)
                  (=> ((dots args))
                      (const r (.create Object source))
                      (.init r (dots args))
                      (return r))))
(const defined (=> (value) (not (= value undefined))))
(def-generic mixin (sources (target {}))
  (assign sources (ternary (.is-array Array sources)
                           sources
                           [sources]))
  (each sources (source)
        (const descriptors (.reduce (Object.keys source)
                                    (=> (descriptors key)
                                        (set descriptors key
                                             (.get-own-property-descriptor

                                              Object source key))
                                        (return descriptors))
                                    {}))
        (each (Object.get-own-property-symbols source ) (sym)
              (const descriptor (.get-won-property-descriptor source sym))
              (if descriptor.enumerable
                  (set descriptors sym descriptor)))
        (.define-properties Object target descriptors))
  (return target))
(def extend (proto extension)
  (mixin extension (.create Object proto)))


(def has-properties (object key (dots keys))
  (const has-key (.has-own-property object key))
  (ternary (not keys.length)
           has-key
           (and has-key (has-properties object (dots keys)))))



(def either (left right value)
  (if value (left value) (right value)))

(export either)

(def conditional (value pred action (dots rest))
  "A functional conditional operator. Immediately evaluates its arguements."
  (if action
      (if (pred value) (action value)

          (conditional value (dots rest)))

      pred (pred value)

      value))

(export conditional)

(def cond (pred action (dots rest))
  "A lazy application of a functional conditional operator. Waits for a value to be given to it before applying its functional arguements"
  (=> (value) (conditional value pred action (dots rest))))
(export cond)

(def partially-apply-after (f (dots args))
  "partially apply a function with the rest of the arguements to this function being appended to the end of the arguements of the given function"
  (lambda ((dots rest-args))
    (f (dots rest-args) (dots args))))

(export partially-apply-after)



(generic Object.prototype.keys (def)
         ((object this))
         (Object.keys object))

(generic Object.prototype.each (def)
         (f (object this))

         (each (object.keys) (k i) (f (get object k) k object))

         object)
(generic Array.prototype.each (def) (f (array this))
         (.for-each array f)
         this)

(def Map.prototype.each (f)
  (.for-each this f)
  this)


(def-generic curry (f (args []) self)
  (if (= args.length f.length)
      (.apply f self args)
      (lambda ((dots args))
          (curry f [(dots args) (dots new-args)]
                 (or self this)))))

(def Function.prototype.curry (...args)
  (curry this args))


(const Obj (lit
            has-properties
            extend
            create
            mixin
            (keys Object.keys)
            (def-generic map (o f (target {})
                                (keys (Obj.keys o)))
              (Arr.mapto keys (=> (k) (f (get o k) k o target keys)) target))
            (def-generic product (o f (target {}) keys)
              (each (Obj.keys o) (k)
                    (set target k ((get f k)
                                   (get o k)
                                   k o target))))
            (def Product (f) (=> (o) (Obj.product o f)))

            (def-generic symbolize ( (structure {})
                                     (symbol-names (Obj.keys structure))
                                     ($ Sym.Namespace symbol-names)
                                     (target { init:structure.init
                                               $:$ }))
              (each symbol-names (name)
                    (set target (get $ name)
                         (get structure name))))))

(const Arr (lit (def-generic mapto (keys f (o {}))
                  (each keys (k) (set o k (f k)))
                  (return o))
                mixin))

(const Sym (lit (def Namespace (symbol-names)
                  (ternary (Array.is-array symbol-names)
                           (Arr.mapto symbol-names Symbol)
                           (Obj.map symbol-names Symbol)))))

(export Obj, Sym, Arr, create, defined, extend, mixin, curry)
