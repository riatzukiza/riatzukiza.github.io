(namespace interface)

(include "../../../../headers/core.sibilant")
(import-namespace kit)
(include "../../../../headers/interface.sibilant")


(var Interface (lit  ( *symbols {})
                     ( *types {})
                     (def-generic define
                         (name

                          *obj *types *symbols

                          ( *shares (or *obj.borrows *obj.shares []))
                          ( *ext (or *obj.extend this))
                          ( *build *obj.build))

                       (if (in  *symbols name)
                           (mixin *obj (get *types (get *symbols name)))
                           (.*construct  Interface name *obj *ext *shares *symbols *types *build)))

                     (def-generic *construct (name *obj *ext *shares *symbols *types *build)
                       (collect proto (extend  *ext (mixin  [ (lit name (symbol (Symbol name))
                                                                   (define Interface.define)
                                                                   (proto *ext)

                                                                   (*construct Interface.*construct)
                                                                   )
                                                              (dots *shares) ]
                                                            *obj))
                                (def proto.construct ()
                                     (.init (Object.create proto)
                                            (dots arguments)))


                                (set *ext '*types *types '*symbols *symbols)
                                (set *symbols name proto.symbol)
                                (set *types  proto.symbol proto)

                                (if proto.build (.build proto ))

                                proto)))) 



(export Interface)
