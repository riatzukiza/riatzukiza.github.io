(include "../../../../headers/core"
         "../../../../headers/interface"
         )
(import-namespace kit)

(macro load (...paths)
       `(include ...@paths))

(macro def-curried (name args ...body)
       `(loose-var @name (R.curry (lambda @args ...@body)) ))

(import cond create extend mixin "../core/util.js")
(import Trie "../../data-structures/trees/trie.js")
(import Event-emitter "../events/index.js")

(require! R 'ramda Path 'path 'assert 'chokidar 'fs)
(const Tree-map Trie)




(define FS-node  Event-emitter

  (init (rel path fs) (.call Event-emitter.init this))

  (gett stats (stat this.path))

  (gett name (Path.basename this.path))
  (def is-dir? () (throw (new Error "This method must be over written by a sub type.")))

  (def-generic watch ( path fs)
    (.watch fs path)))
(define File FS-node


  (gett value (read-file this.path))
  (sett value v (then (Promise.resolve v) v
                      (write-file this.path v)))

  (gett string (read-file this.path "utf8"))
  (sett string s (then (Promise.resolve s) s
                       (write-file this.path  s)))

  (def-generic get-value (path)
    (read-file path))

  (def-generic set-value ( (value "") path)
    (then-do (write-file  path value) this))

  (gett read-stream (.get-read-stream this))
  (gett write-stream (.get-write-stream this))
  (def is-dir? () false)
  (def is-file? () true)

  (def-generic get-read-stream (path) (fs.create-read-stream path))
  (def-generic get-write-stream (path) (fs.create-write-stream path))


  (def-generic write ())
  (def-generic read ())
  (def-generic pipe ()))
(export File)


(define Directory FS-node

  (def-generic set (rel value ( type File ) fs path)
    (.set fs (Path.join rel path) value type))

  (def-generic get  (rel fs path)
    (fs.find (Path.join path rel)))

  (def-generic set-value ()
    (then-do (mkdir this.path) this))

  (def-generic get-value ()
    (then-do (readdir this.path) this))

  (def-generic insert (rel  ( type File ) fs path)
    (.insert fs (Path.join rel path) type))

  (def-generic each (f children)
    (.then children (feach  f)))

  (def-generic map (f children)
    (.then children (fmap f)))

  (def-generic recursive-remove (path )
    (pipe this
          (.each (cond is.file (fpipe .delete) is.dir  (fpipe .recursive-remove)))
          (.then (fpipe .remove))))

  (def-generic remove-empty-directory (path)
    (rmdir path))

  (def-generic remove (path (recursive? false))
    (if recursive?
        (.recursive-remove this path)
        (.remove-empty-directory this path)))

  (gett sub-system ((create File-system) this.path))

  (def is-dir? () true)
  (def is-file? () false)


  (gett keys (readdir this.path))

  (gett get-child (=> (d) (.get this d)))

  (gett children 
        (pipe this.keys
              (.then (fpipe (.map this.get-child)
                            Promise.all)))))

(export Directory)

(import-namespace interface)
(def-curried *discover-node  (rel path seq *tree  sys stats)
  (.set *tree seq
        (if (.is-directory stats)
            ( (create Directory) rel path sys)
            ( (create File) rel path sys))))

(def *find-absolute-path (path root)
  (Path.resolve  root path))

(def-curried itterate (f file)
  (if (is-dir file)
      (.each file (itterate f))
      (f file)))

(define File-system Event-emitter

  (root ".")

  (init (root (*tree ((create Tree-map) ))))

  (def-generic find (rel *tree  root   )

    (var abs-path (*find-absolute-path rel root))
    (var seq (tokenize abs-path ))
    (var node (find-value seq *tree)
         sys this)

    (if node
        (.resolve Promise node)
        (.then (stat abs-path)
               (*discover-node rel abs-path seq *tree sys))))
  (def-generic exists (path)
    (pipe (.find this path)
          (.then (-> true))
          (.catch (-> false))))

  (def-generic watch (path opts root )
    (var sys this)
    ;; file watching should be an entirely seperate system.
    ;;(print "watch method of File-system is pending depreciation")
    (async-let ((node (.find sys path )))
      (assign node.*watcher
              (pipe chokidar
                    (.watch  node.path)
                    (on  'all (event-name changed-path stats)
                         (var rel (Path.relative root changed-path ))
                         (async-let ((changed-node (.find sys rel )))
                           (var event (lit (event event-name) (node changed-node)))
                           (.emit node "*" event)
                           (.emit node "all" event)
                           (.emit node event-name event)))))
      node))

  (def-generic insert (rel   ( type File ) root (sys this))
    (catch (.find sys rel)

      (var abs-path (*find-absolute-path rel root))

      (pipe (tokenize rel)
            (.reduce  fill-sub-dir [(Promise.resolve) root])
            first
            (then-do (.set-value ((create type) rel abs-path sys)
                                 )
                     ))))

  (def-generic set (path v  ( type File ) root (sys this))
    (pipe (.insert sys path type root sys)
          (.then (#-> (.set-value v)))))

  (def-generic delete (path))

  (def-generic each (f)
    (.then (.find this ".") (itterate f))))



(var testing? true)


(macro easy-on (emitter event ...body) `(on @emitter @event (@event) ...@body))




(var is (lit (def string (v) (string? v))
             (def empty (value)
               (empty? value))))



(def athrow (err-type message)
  (-> (new err-type message)))

(def get-value-of (o) (.get-value o))



(macro =-> (...body) `(=> ($pipe) (pipe $pipe ...@body)))

(var emit (R.invoker 2 "emit"))
(var bi-curry (R.curry-n 2 ))
(var _ R._)

;; (var *discover-type (cond (R.pipe R.head directory?)
;;                           (R.pipe (nth 1) (create Directory))
;;                           (R.pipe (nth 1) (create File))))
;; (var *discover-node (bi-curry (R.unapply (R.pipe (.set *tree seq) *discover-type) )))




;; Be you, the app that uses this app is the test for the app

(def-lit-macro def-curried (name args ...body)
  `(property @name (R.curry (lambda @args ...@body))))

(def-curried feach (f a)
  (.each a f))

(def-curried fmap (f a) (.map a f))

(def identity (a) a)

(def-curried set-value (v o) (assign o.value v))

(macro let* (vars ...body)
       "introduce scoped variables via nested lexical closures"

       (if (> (length vars.contents) 1)
           `(let (@(first vars.contents))
              (let* (...@(rest vars.contents)) ...@body))
           `(let (@(first vars.contents)) ...@body)))


(require! 'fs)

(def plift (f)
  (=> ((dots args))
      (make-promise
       (.apply f this [ (dots args)
                        (=> (err data)
                            (if err (reject err) (resolve data))) ])))) 
(var stat (plift fs.stat)
     mkdir (plift fs.mkdir)
     rmdir (plift fs.rmdir)
     read-file (plift fs.read-file)
     write-file (plift fs.write-file )
     readdir (plift fs.readdir))

(def is-dir  (c) (= c.symbol Directory.symbol ))

(var *directory? (=> (stats) (.is-directory stats)))

(def fill-sub-dir ([p sub-path] seg) [ (catch (then-do p (mkdir sub-path))) (Path.join sub-path seg) ])
(export File-system)


(var not-single-dot (=> (token) (not (= token ".")))
     find-value (=> (seq *tree) (get (.find *tree seq) 'value))
     tokenize (fpipe  (.split  "/") (.filter  not-single-dot)))


(def-curried reduce-promise (f a) (.reduce a f [(Promise.resolve) ""]))
(macro chain-promise (p ...rest)
       (if (empty? rest)
           p
           `(then-do @p (chain-promise ...@rest))))

(def-promised timeout (t)
  (set-timeout success t))

(def once-then ( event  emitter)
  (make-promise (.once emitter event success )))
(assign exports.System File-system)

(def File-system.load (root-path)
  ((create File-system) root-path))

(assign exports.load File-system.load)

