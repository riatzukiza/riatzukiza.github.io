
(include "../../../../headers/core.sibilant")

(import-namespace kit)


(include "../../../../headers/interface.sibilant")



(macro then-pipe (promise ...body)
       `(pipe @promise ...@(map body (f) `(.then @f))))

(macro resolve-then ( value ...body)
       `(pipe (Promise.resolve @value)
              (then @value ...@body)))

(def write-element-attribute (value key)
  (resolve-then value (promise-write-to-stream stream (+ key "=" "'" value "' " )))) 

(macro arrow-let (defs ...body)
       ;; clarify this, document or re-write.
       `(let (...@(.map defs.contents (=> (de)
                                          `(@(first de.contents) (=> ...@(rest de.contents)))))) ...@body))
(alias-macro arrow-let =>-let)
(alias-macro arrow-let flet)

(macro doc ())
(macro infix-assignment-string (key value)
       `(+ @key "=" "'" @value "' " ))

(def-curried render-element-attribute (value key stream)
  "given a key and a value, render the attribute string fragment"
  (promise-write-to-stream stream (+ " " (infix-assignment-string key value) )))

(def-promised promise-write-to-stream (stream data)
  (.write stream data success))

(def-curried render-child-segment (stream segment)
  (if (undefined? segment)
      (Promise.resolve)

      (array? segment)
      (pipe (Promise.all segment)
            (.then (render-children stream)))

      segment.render (.render segment stream)

      (promise-write-to-stream stream (+ "" segment))))

(def-curried render-children (stream children)
  (.reduce children (=> (promise promised-element)
                        (pipe promise
                              (then-do  promised-element)
                              (.then (render-child-segment stream))))
           (Promise.resolve)))

(def end-opening-tag      (stream)
  (-> (promise-write-to-stream stream ">")))

(def render-opening-tag   (stream name)
  (-> (promise-write-to-stream stream (+ "<" name))))

(def render-closing-tag   (stream name)
  (-> (promise-write-to-stream stream (+ "</" name ">\n"))))
(define Html-element Interface

  (gett body  this.*body)
  (gett stream  ((create Promise-writer) this.*stream))
  (gett promise  this.*promise)

  (init ((name "")
         (attributes {})
         (*body [])
         *stream
         (*promise (Promise.resolve))))
  (def-generic render  (stream name  attributes body promise)

    (doc "Write an html document fragment to a stream, and its content. Content can be a string, promise, or a renderable.") 

    (flet ((render-element-attribute (value key)

             (doc "given a key and a value, render the attribute string fragment associated to the given stream")

             (resolve-then value (promise-write-to-stream stream (+ " " key "=" "'" value "' " )))))

      (flet ((render-attributes ()
               (Promise.all
                (pipe (Object.keys attributes)
                      (map (k) (render-element-attribute (get attributes k) k)))))) 
        (then-pipe (Promise.resolve)
                   (render-opening-tag stream name)
                   render-attributes
                   (end-opening-tag stream)
                   (-> (render-children stream body))
                   (render-closing-tag stream name))))))
(export Html-element)

(var html-element (create Html-element))
(assign module.export html-element)

(export html-element)
