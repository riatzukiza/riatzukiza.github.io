(import Event-emitter "./kit/events/index.js")
(import Spawnable "./data-structures/spawnable.js")
(import Trie "./data-structures/trees/trie.js")

(define Grid-view Spawnable
  (doc-string "Shared.Grid.Grid-view"
              "None"


              "A generic interface for accessing subsections of a grid."
              "Expects an implementation of:"
              "- Cells: A list of cells in the grid that are in the view area."
              "- grid: The grid this is a view into."
              "- grid-x: The x coordinate of the origin cell of the grid."
              "- grid-y: The y coordinate of the origin cell of the grid."
              "- get(x, y): An accessor method for locating cells with in the grid-view.")
  (expects grid)
  (expects init)
  (expects cells)
  (expects grid-x)
  (expects grid-y)
  (expects get))
(define Grid-cell Spawnable
  (init (x y  grid) )
  (expects data)

  (gett north (.get this.grid this.x (+ this.y 1)))
  (gett south (.get this.grid this.x (- this.y 1)))
  (gett east  (.get this.grid (+ this.x 1) this.y))
  (gett west (.get this.grid (- this.x 1) this.y))

  (gett north-east (.get this.grid (+ this.x 1) (+ this.y 1)))
  (gett north-west (.get this.grid (- this.x 1) (+ this.y 1)))
  (gett south-east (.get this.grid (+ this.x 1) (- this.y 1)))
  (gett south-west (.get this.grid (- this.x 1) (- this.y 1)))

  (def* area (n) (.area this.grid this.x this.y n))

  (cached edges (Array.from (.area this 1)))

  (alias neighbors edges)
  (alias adjacent-tiles edges)
  (alias adjacent edges))

(export Grid-cell)
(define Grid-chunk Grid-view

  (init (x y *grid))
  (gett grid this.*grid)
  (gett size this.grid.chunk-size)
  (gett chunks this.grid.chunks)
  (gett overlap-factor this.grid.overlap-factor)

  (gett north (.get-chunk this.grid this.x (+ this.y 1)))
  (gett south (.get-chunk this.grid this.x (- this.y 1)))
  (gett east  (.get-chunk this.grid (+ this.x 1) this.y))
  (gett west (.get-chunk this.grid (- this.x 1) this.y))

  (gett north-east (.get-chunk this.grid (+ this.x 1) (+ this.y 1)))
  (gett north-west (.get-chunk this.grid (- this.x 1) (+ this.y 1)))
  (gett south-east (.get-chunk this.grid (+ this.x 1) (- this.y 1)))
  (gett south-west (.get-chunk this.grid (- this.x 1) (- this.y 1)))
  (cached cells (Array.from (this.grid.square-area this.grid-x this.grid-y this.size)
                            (=> (cell i)
                                (assign cell.chunk this)
                                (assign cell.chunk-index)
                                cell)))
  (cached grid-x (* this.x this.size this.overlap-factor))
  (cached grid-y (* this.y this.size this.overlap-factor))
  (def-generic get (x y grid grid-x grid-y size)
    (doc-string "Shared.Grid.Grid-chunk.get"
                "x: signed int, y: signed int"
                "Retrieves a grid cell from within the chunk.")
    (.get this.grid (+ grid-x (mod x size))
          (+ grid-y (mod y size)))))
(export Grid-chunk)
(define Rectangular-view Grid-view
  (init (x y w h grid))
  (cached grid-x (* this.x this.w 2))
  (cached grid-y (* this.y this.h 2))
  (cached cells (this.grid.area this.grid-x this.grid-y this.w this.h)))
(export Rectangular-view)


(define Grid Spawnable
  (Chunk Grid-chunk)
  (Cell Grid-cell)
  (init ((cells (.spawn Trie ))
         (chunks (.spawn Trie))))

  (chunk-size 256)
  (overlap-factor 2)

  (def-generic get-nearest-chunk (x y chunk-size overlap-factor)
    (.get-chunk this (Math.round (/ x chunk-size overlap-factor))
          (Math.round (/ y chunk-size overlap-factor))))

  (def-generic get-nearest-chunks (x y n chunk-size overlap-factor)
    (pipe this
          (.chunk-square-area
           (Math.round (/ x chunk-size overlap-factor))
           (Math.round (/ y chunk-size overlap-factor))
           n )))

  (def-generic get-chunk (x y chunk-size overlap-factor)
    (remember this.chunks [x y]
              (.spawn this.Chunk x y this)))

  (def* chunk-area (x* y* w h)
    (for! (x (- x* w)) (< x (+ x* w) ) (++ x)
          (for! (y (- y* h)) (< y (+ y* h) ) (++ y)
                (yield (.get-chunk this x y))))
    (return)
    )

  (def chunk-square-area (x* y* n)
    (const r (.chunk-area this x* y* n n))
    r
    )

  (def* area (x* y* w h)
    (for! (x (- x* w)) (< x (+ x* w) ) (++ x)
          (for! (y (- y* h)) (< y (+ y* h) ) (++ y)
                (yield (.get this x y))))
    (return))

  (def square-area (x* y* n) (.area this x* y* n n))

  (def get (x y)
    (remember this.cells [x y]
              (if (.has this.cells [x y])
                  (.get this.cells [x y])
                  (do (const tile (.spawn this.Cell x y this))
                      (.set this.cells [x y] tile)
                   tile)))))
(export Grid)
