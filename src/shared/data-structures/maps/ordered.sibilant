(import  List "../list.js")
(import Interface "../../kit/interface/index.js")
(import Saveable "/shared/saveable.js")

(define Ordered-map Saveable
  (init ((*members (new Map))
         (*values ((create List)))))

  (gett values this.*values)
  (gett members this.*members)

  (gett size this.*values.length)
  (gett length this.*values.length)

  (def-generic clear ( *members *values )
    (.clear members)
    (.clear *values))

  (def-generic has (key *members)
    (.has *members key))

  (def-generic get (key *members *keys)
    (get (.get *members key) 'item))

  (def-generic each (callback *members)
    ;; (for-of! [key node] *members
    ;;          (callback node.item key))
    (var node this.*values.head)
    (while! node
      (callback node.item node.key)
      (assign node node.next)
      )
    this)

  (def-generic map (callback *members *values )
    ;; this could be optimized with node based operations.
    (collect r ((create Ordered-map))
             (each *values (item node)
                   (.set r node.key (f item node.key r)))))


  (def-generic *delete (key *members  *values )
    (const node (.get *members key))
    (.remove-node *values node)
    (.delete *members key ))

  (def-generic delete (key *members )
    (.*delete this key))

  ;; When we are pushing values, do we care if there is a duplicate?
  ;; if we do care about the order of duplicate entries, a map is not an apropriate interface.
  ;; We don't care, because this is a map.
  ;; A map doesn't have push ops...
  ;; but it is ordered.
  ;; We don't use these, I'm writing them just cause.
  ;; I have a feeling this will be the cause of a headache in the future.
  (def-generic push ([key value] *members  *values )
    (unless (.has *members key)
      (.push *values value)
      (assign *values.tail.key key)
      (.set *members key *values.tail)
      (return *values.length)))

  (def-generic unshift ([ key value] *members  *values )
    (unless (.has *members key)
      (.unshift *values key)
      (assign *values.head.key key)
      (.set  *members key *values.head)
      (return *values.length)))

  (def-generic pop (*members  *values)
    (.delete  *members *values.tail.key)
    (.pop *values))

  ;; TODO : Write node based list operations for order based operations
  ;; that may depend on the key associated, as the key is not part of the arguements
  ;; and with only the value being returned, if the consumer requires knowing the key that was
  ;; associated with this element, it will not be available.
  (def-generic shift (*members  *values )
    (.delete *members *values.head.key)
    (.shift *values))

  (def-generic set (key value *members *values)
    (unless (.has *members key)
      (.push *values value)
      (assign *values.tail.key key)
      (.set *members key *values.tail))))

(export Ordered-map)
