(import Saveable "../saveable.js")

(define Spawnable Saveable
  (def build ()
    (.call Saveable.init this)
    (assign this.pool []))
  (def aquire ()
    (if (> this.pool.length 0)
        (.pop this.pool)
        (Object.create this))
    )
  (def spawn ((dots args))
    (.init (.aquire this) (dots args))
    )

  (def clear () (throw (new Error "No clear function defined for spawnable datatype")))

  (def despawn ()
    (.clear this)
    (.push this.pool this)))

(export Spawnable)

;; For debugging 
;; (define Spawnable Interface
;;   (def build ()

;;     (assign this.pool []
;;             this.interface this
;;             this.available (new Set)
;;             this.in-use (new Set)
;;             this.current-id 0)
;;     )
;;   (def spawn ((dots args))
;;     (if (> this.pool.length 0)
;;         (do (const o (.pop this.pool))

;;             (if (.has this.in-use o)
;;                 (throw (new Error "A spawnable object has been pulled from the pool when already in use.") ))

;;           (collect r (.init  o (dots args))
;;                    (assign r.used true)
;;                    (.add this.in-use r)
;;                    (.delete this.available r)))

;;         (collect r ((create this) (dots args))
;;                  (assign r.used true)
;;                  (assign r.id this.current-id)
;;                  (incr this.current-id)
;;                  (.add this.in-use r))))

;;   (def clear () (throw (new Error "No clear function defined for spawnable datatype")))

;;   (def despawn ()
;;     (if (.has this.available this) (throw (new Error "Trying to despawn a previously cleared object.")))
;;     (assign this.used false)
;;     (.clear this)
;;     (.push this.pool this)
;;     (.add this.available this)
;;     (.delete this.in-use this)))
