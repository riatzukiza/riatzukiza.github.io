(namespace shared)
(import Spawnable "./spawnable.js")

(const empty-nodes [])
(define Node Spawnable
  (init (list  next prev item))
  (def clear ()
    (set this 'list null
         'next null
         'prev null))
  (gett is-head (= this this.list.head))
  (gett is-tail (= this this.list.tail))
  (def bind (list next prev) (.init this list next prev) this)
  (def set (item) (assign this.item item) this))

(define List Spawnable
  (init () (assign this.length 0))
  (gett count this.length)
  (gett size this.length )
  (gett empty? (= this.length 0))
  (def-generic from (array-like (f (=> (a) a)))
    (const list ((create this)))
    (each array-like (e i)
          (list.push (f e)))
    list)
  (def clear ()
    (while (> this.length 0) (.pop this)))

  (def of ((dots items))
    (this.from items))

  (def push (item)
    (get (.push-node this (.spawn Node this  null null item)) 'item ))
  (def unshift (item) (get  (.unshift-node this (.spawn Node this  null null item)) 'item ))

  (def pop () (get (.pop-node this) 'item))
  (def shift () (get (.shift-node this) 'item))

  (def insert (item predicate))
  (def remove (item)
    (var node this.head)
    (var r false)
    (while (and node (not r))
      (if (!= node.item item)
          (assign node node.next)
          (do 
              (assign node (.remove-node this node))
              (assign r node.item))))
    (return item))

  (def node (item) (.spawn Node this  null null item))

  (def push-node (node)
    (if (not this.empty?)
        (assign this.tail (assign this.tail.next (.bind node this  null this.tail)))
        (assign this.head (assign this.tail (.bind node this  null null))))
    (incr this.length)
    node)
  (def unshift-node (node)
    (if (not this.empty?)
        (assign this.head (assign this.head.prev (.bind node this this.head null)))
        (assign this.head (assign this.tail (.bind node this null null))))
    (incr this.length)
    node)
  (def pop-node ()
    (return (ternary this.empty? null (.remove-node this this.tail))))
  (def shift-node ()
    (return (ternary this.empty? null (.remove-node this this.head))))

  (def insert-node (n predicate))
  (def remove-node (node)
    ;; (print "removing" node.item node node.list node.list.length node.next node.prev)
    (if! (not (= node.list this))
         (throw (new Error "node cannot be removed from a list it is not a part of")))
    (if (= node this.head) (assign this.head node.next))
    (if (= node this.tail) (assign this.tail node.prev))

    (if node.next (assign node.next.prev node.prev))
    (if node.prev (assign node.prev.next node.next))
    (decr this.length)
    (if (> 0 this.length)
        (throw (new Error "negative length"))
        )
    (if node (.despawn node))
    node)
  (def splice-node (prev node next))
  ; (def-generic rotate-node (node (next node.next) (prev node.prev))
  ;;   (set node 'prev next.prev
  ;;        'next node.next)
  ;;   (set next 'prev node.prev
  ;;        'next node.next)
  ;;   (if (= node this.head) (assign this.head next))
  ;;   (if (= next this.tail) (assign this.tail node))
  ;;   )
  (def sort (predicat e))
  (def each (f)
    (var node this.head)
    (while node
      (f node.item node)

      (assign node node.next))
    this)
  (def map (f)
    (var result ((create List)))
    (var node this.head)
    (while node
      (.push result (f node node.next node.prev))))
  (def to-array ())

  (def reduce (f r) (.each this (=> (e i l) (assign r (f r e i l)))) r)

  (def-generic find-node (f (node this.head))
    (if (f node)
        node
        (not (= node this.tail))
        (List.find f node.next)
        false))
  (def-generic find (f (node this.head))
    (var r (List.find-node f node))
    (if r r.value false))


  (def-generic rotate ()
    ;; (const last-node (this.pop-node true))
    ;; (print "rotating list" last-node this)
    ;; (this.unshift-node last-node)
    (.push this (.shift this))
    this
    )

  (def-generic rotate-until (predicate)
    (var r false)

    (var t 0)
    (while (and (not r) (< t this.size))
      (if (predicate this.head.item)
          (assign r this.head.item)
          (do
           (.rotate this)
           (incr t))))
    (return r)))

(export List)
