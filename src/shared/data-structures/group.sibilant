(include "../../../headers/interface.sibilant")
(import-namespace interface)

(import List "../data-structures/list.js")
(import Spawnable "../data-structures/spawnable.js")

(define Group Spawnable
  (init ((*list (.spawn List))
         (*members (new Map))))

  (gett size this.*list.length)
  (gett length this.*list.length)
  (gett last this.*list.last)
  (def-generic clear (*list *members)
    (.clear *members)
    (.clear *list))

  (def create ()
    "create an empty group instance"
    ((create this) (dots arguments)))

  (def of ((dots items))
    "create a new group instance with a variable number
of arguements,regardless of the number or type of arguements.
See the native `Array.of` static method."

    (var list (List.from items))
    ((create this) list))

  (def-generic from (items (fn (=> (a) a)))
    "create a new group instance from an array like, or iterable object."
    (const list (List.from (.map (Array.from items) fn)))
    (const members (new Map))
    (each list (item node) (.set members item node))
    ((create this) list members))

  (def-generic pop (*list *members)
    "remove and return the element last in the groups ordering."
    (collect item (.pop *list)
             ;; (print "Popping from group" item *list *members)

             (.delete *members item)))

  (def-generic push (value)
    "Add an element to the end of the groups ordering.")

  (def-generic each (f *list)
    "Call the given function on every element of the group, returning the group which is being itterated on"
    (.each *list f)
    this)

  (def-generic find (f *list)
    (.find *list f))

  (def-generic add (member *list *members)
    "Add an value to the group, unless the group already has that member."
    (unless ( *members.has member)
      (collect node (.node *list member)

               (.set *members member node)
               (.push-node *list node))))
  (def-generic reduce (f accumulator *list) (.reduce *list f accumulator))

  (def-generic has (member *members)
    "Check if the group has the given member, returning true if yes, and false if no."
    (.has *members member))

  (def-generic remove (member *list *members)
    "Remove a specific member from the group."
    (collect node (.get *members member)
             (if node
                 (do (.remove-node *list node)
                  (.delete *members member))
                 (throw (new Error "Can't remove a member from a group they don't belong to"))
               ))))

(export Group)
