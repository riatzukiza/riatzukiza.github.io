(namespace shared)
(import Binary-search-tree "./binary-search-tree.js")
(import List "../list.js")

(define Red-black-tree Binary-search-tree
  (init ((key null)
         (parent null)
         (color "red";; (if parent (if parent.is-black? "red" "black")
                ;;     "black"
                ;;     )
                )
         (values (.spawn List))))
  (gett depth (var count 1)
        (var node this)
        (while node
          (assign node node.left)
          (incr count))
        count
        )
  ;; (gett parent this.*parent)
  ;; (sett parent v
  ;;       (if (= v this)
  ;;           (throw (new Error
  ;;                       "Time traveler detected. A node cannot be it's own parent"))
  ;;           (do (var node this)
  ;;               (while node
  ;;                 (assign node node.parent)
  ;;                 (if (= v node)
  ;;                     (new Error "Time traveler detected, a node cannot be it's own grand(er)parent")))

  ;;             (assign this.*parent v))))
  (gett is-time-traveler? (= this.*parent this))

  (gett has-red-child? (or (and this.left this.left.is-red? )
                           (and this.right this.right.is-red?)))

  (gett is-left-red? (and this.left this.left.is-red? ))
  (gett is-red? (= this.color "red"))
  (gett is-black? (= this.color "black"))

  (def swap-colors (node)
    (const temp this.color)
    (assign this.color node.color)
    (assign node.color temp))

  (def-generic fix-red-red ()
    (if! this.is-root?
         (assign this.color "black")
         (return))
    (var parent this.parent
         grandparent parent.parent
         uncle this.uncle)

    (if (not parent.is-black?)
        (if (and uncle uncle.is-red?)
            (do (assign parent.color "black"
                        uncle.color "black"
                        grandparent.color "red")
              (.fix-red-red grandparent))
            (if parent.is-on-left?

                (do (if this.is-on-left?
                        (.swap-colors parent grandparent)

                        (do (.rotate-left parent)
                            (.swap-colors this grandparent)))

                    (.rotate-right grandparent))

                (do (if this.is-on-left?
                        (do (.rotate-right parent)
                            (.swap-colors this grandparent))

                        (.swap-colors parent grandparent))

                    (.rotate-left grandparent))))))

  (def-generic fix-double-black (sibling parent)
    (if! this.is-root?
         (return))
    (if (not sibling)
        (.fix-double-black parent)
        (do (if sibling.is-red?
                (do (assign parent.color "red"
                            sibling.color "black")
                    (if sibling.is-on-left?
                        (.rotate-right parent)
                        (.rotate-left parent))
                  (.fix-double-black this))
                (if sibling.has-red-child?
                    (do (if sibling.is-left-red?
                            (if sibling.is-on-left?

                                (do (assign sibling.left.color sibling.color
                                            sibling.color parent.color)
                                    (.rotate-right parent))

                                (do (assign sibling.left.color parent.color)
                                    (.rotate-right sibling)
                                  (.rotate-left parent)))
                            (if sibling.is-on-left?
                                (do (assign sibling.right.color parent.color)
                                    (.rotate-left sibling)
                                  (.rotate-right parent))
                                (do (assign sibling.right.color sibling.color
                                            sibling.color parent.color)
                                    (.rotate-left parent))))
                        (assign parent.color "black"))
                    (do (assign sibling.color "red")
                        (if parent.is-black?
                            (.fix-double-black parent)
                            (assign parent.color "black"))))))))
  

  (def get-replacement-node ()
    (if  this.has-two-children? this.right.successor
         this.is-leaf? null

         (or this.left this.right)))

  (def-generic delete-node (parent)
    (var u (.get-replacement-node this))
    (var uv-black (and (or (not u) u.is-black?)
                      this.is-black?))
    (if! (not u)

         (if this.is-root?
             (do (.clear this.values))
             (do (if uv-black (.fix-double-black this)
                     this.has-sibling? (assign this.sibling.color "red"))

                 (if this.is-on-left?
                     (assign parent.left null)
                     (assign parent.right null))

               (.despawn this)))
         (return))

    (if! (or (not this.left) (not this.right)) 
         (if this.is-root?
             (do (.swap-keys this u)
                 (assign this.left (assign this.right null))
               (.despawn u)
               )

             (do (if this.is-on-left?
                     (assign parent.left u)
                     (assign parent.right u))

                 (.despawn this)
               (assign u.parent parent)

               (if uv-black
                   (.fix-double-black u)
                   (assign u.color "black"))))
         (return))

    (.swap-keys u this)
    (.delete-node u))
  (def clear ()
    (if (> this.values.length 0)
        (throw (new Error "Cannot clear node with empty bucket")))
    (const root this.root)

    (.despawn this.values)

    (assign this.parent null)
    (assign this.left null)
    (assign this.right null)
    (assign this.color null)

    (const key this.key)
    (assign this.key null)

    (const node (.search root key))
    (if (= node this)
        (throw (new Error "Clearing node that is still in the tree")))

    )

  (def delete-by-key (key)
    (if! (not this.root)
         (return))
    (const node (.search this key))
    (.delete-node node))

  (def-generic remove (key value (depth null))
    (const node (.search this key depth))
    ;; (if! node.is-root? (print "removing root node" key value))
    ;; (print "removing" key value this node node.values node.values.length)
    (const item (.remove  node.values value))
    ;; (print "removed" key value this node node.values node.values.length)
    (if (not item)
        (throw (new Error "Trying to remove a value not on this node.")))
    (if (= node.values.length 0)
        (do ;; (print "removing empty bucket"
            ;;        key value this node node.values node.values.length)
            (.delete-node node)
          ;; (print "removed empty bucket"
          ;;        key value this node node.values node.values.length)
          )))

  (def-generic insert (key (depth null))
    (if!  this.is-root?
          (if! (not this.key)
               (if! (or this.left this.right)
                    (throw (new Error "A root with out a key has children")))
               (assign this.key key)
               (assign this.color "black")
               (return this))
          (if! (= this.key key)
               (return this)))


    (const temp (.search this key depth))

    (if! (= temp.key key)
         ;; (print "it's already in here." temp key)
         (return temp))
    ;; (print key temp.key (= key temp.key))

    (const new-node (.spawn Red-black-tree key temp))

    (if (< key temp.key) (assign temp.left new-node)
        (assign temp.right new-node))

    (.fix-red-red new-node)
    (return new-node))

  (def-generic search (key (depth null))
    (var temp this
         break? false)
    (while! (and temp (not break?)
                (ternary (number? depth) (> depth 0) true)
                )

      (if! (number? depth)
          (decr depth))

      (cond! (< key temp.key)
             ((if-else! (not temp.left)
                        (break)
                        ((assign temp temp.left)
                         continue)))

             (= key temp.key) (break)
             ((if-else! (not temp.right) (break)
                        ((assign temp temp.right ))
                        )
              )
           )
      )
    (return temp))

  (def-generic set (key value (depth null))
    (const node (.insert this key depth ))
    (.push (get node 'values) value)
    node))


(export Red-black-tree)
