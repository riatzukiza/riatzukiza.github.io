(import Spawnable "../spawnable.js")
(import List "../list.js")

(define Fixed-bst  Spawnable
  (init ((key null)
         (depth 20)

         (parent null)
         (*root (if (not parent)
                   this
                   parent.root))
         ;; (left (if (> depth 0)
         ;;           (.spawn Binary-search-tree
         ;;                   null
         ;;                   (- depth 1)
         ;;                   this)
         ;;           null) )
         ;; (right (if (> depth 0)
         ;;            (.spawn Binary-search-tree
         ;;                    null
         ;;                    (- depth 1)
         ;;                    this)
         ;;            null))
         (values (.spawn List))
         ))
  ;; (gett left (if

  ;;             this.*left this.*left
  ;;             (= this.depth 0) null
  ;;             (assign this.*left (if (> this.depth 0)
  ;;                                    (.spawn Binary-search-tree
  ;;                                            null
  ;;                                            (- this.depth 1)
  ;;                                            this)
  ;;                                    null))
  ;;             ))
  ;; (gett right (if this.*right this.*right
  ;;              (= this.depth 0) null
  ;;                (assign this.*right (if (> this.depth 0)
  ;;                                       (.spawn Binary-search-tree
  ;;                                               null
  ;;                                               (- this.depth 1)
  ;;                                               this)
  ;;                                       null))))
  (gett root
        (if this.*root.is-root?
            this.*root
            (not this.*root)
            null
            (do (var node this)
                (assign this.*root
                        (while node.parent
                          (assign node node.parent))))))
  (sett root v
        (if v
            (do (assign v.parent null)
             (assign this.*root v))))

  (gett grandparent this.parent.parent)
  (gett is-leaf? (and (not this.left) (not this.right)) )
  (gett successor (var temp this)
        (while temp.left
          (assign temp temp.left)))
  (gett is-root? (not this.parent))
  (gett uncle (if (or this.is-root? this.parent.is-root?)
                  null

                  this.parent.is-on-left?
                  this.parent.parent.right

                  this.parent.parent.left))
  (gett is-on-left? (= this this.parent.left))
  (gett sibling (if this.is-root?
                    null

                    this.is-on-left?
                    this.parent.right

                    this.parent.left))
  (def move-down (n-parent)
    (if this.parent
        (if this.is-on-left?
            (assign this.parent.left n-parent)
            (assign this.parent.right n-parent)))
    (assign n-parent.parent this.parent)
    (assign this.parent n-parent))

  (def swap-keys (node)
    (const temp node.key)
    (assign this.key node.key)
    (assign node.key temp))

  (def-generic rotate-left ()
    (var x this)
    (var y x.right)
    (assign x.right y.left)

    (if y.left (assign y.left.parent x))

    (assign y.left x.parent)
    (if (not x.parent)
        (assign y.parent null)
        (= x x.parent.left)
        (assign x.parent.left y)
        (assign x.parent.right y))
    (assign y.left x)
    (assign x.parent y)
    (incr y.depth)
    (decr x.depth))
  (def-generic rotate-right ()
    (var x this)
    (var y x.left)
    (assign x.left y.right)
    (if y.right (assign y.right.parent x))
    (if (not x.parent)
        (assign y.right null)
        (= x x.parent.right)
        (assign x.parent.right y)
        (assign x.parent.left y))
    (assign y.right x)
    (assign x.parenty)
    )
  (def-generic set ((key null) value depth)
    (if (or (not this.key) (= key this.key) (= depth 0))
        (do (set this 'key key )
            (.push this.values value))
        (< key this.key)
        (if this.left
            (.set this.left key value)
            (assign this.left (.set (.spawn Binary-search-tree
                                            null
                                            (- depth 1)
                                            this)
                                    key value
                                    ))

            )

        (> key this.key)
        (if this.right
            (.set this.right key value)
            (assign this.right (.set (.spawn Binary-search-tree
                                             null
                                             (- depth 1)
                                             this)
                                     key value
                                     ))
            ))

    this
    )
  ;; (def-generic set ((key null) value depth)
  ;;   (if (or (not this.key) (= key this.key) (= depth 0))
  ;;       (do (set this 'key key )
  ;;           (.push this.values value))
  ;;       (> key this.key)
  ;;       (.set this.left key value)

  ;;       (< key this.key)
  ;;       (.set this.right key value)))

  (def map (f)
    (const r (.spawn this.proto))
    (each this (node k)
          (.set r k (f node k) ))
    (return  r))

  (def each (f)
    (.each this.values (=> (v) (f v this.key)))
    (.each this.left f)
    (.each this.right f))

  (def remove (key value)
    (doc-string "shared.datastructures.trees.binary-search-tree.remove"
                "key: A numeric key, value: A value to be removed."
                "Search the tree as deep as needed to find and remove a value")
    (const branch (.search this key this.depth))
    (if (.remove branch.values value)
        (if (= branch.values.length 0)
            (assign this.key null))))

  (def prune (key depth)
    (doc-string "shared.datastructures.trees.binary-search-tree.prune"
                "key: A numeric key, depth: How far to  traverse the tree before cutting off"
                "Search the tree to a given depth for a key, removing the branch at the depth."))
  (def-generic search (key depth)
    (doc-string "shared.datastructures.trees.binary-searchtree.search"
                "key: A numeric key, depth: How far down the tree to search."
                "Search the tree to a given depth for a key, returning the branch at the requested depth."
                )
    (if (or (= depth 0) (= key this.key))
        this
        (and (< key this.key) this.left)
        (.search this.left key (- depth 1))
        (and (> key this.key) this.right)
        (.search this.right key (- depth 1))
        this
        )))

(export Binary-search-tree)
