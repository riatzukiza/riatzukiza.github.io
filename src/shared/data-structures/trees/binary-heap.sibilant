(import  Spawnable "../spawnable.js")
(define Heapable Spawnable
  (expects heap)
  (expects index)
  (expects compare-to)
  (gett right-index (+ (* 2 this.index) 2))
  (gett left-index (+ (* 2 this.index) 1))
  (gett parent-index (Math.floor (/ (- this.index 1) 2)))
  (def-generic get-parent-index (index)
    (Math.floor (/ (- index 1) 2)))
  (gett smallest-child-index
        (if (or (>= this.right-index this.heap.length)
                (< (get this.heap this.left-index 'priority)
                   (get this.heap this.right-index 'priority)))
            this.left-index
            this.right-index))

  (gett root (first this.heap))
  (gett min-val this.root)
  (gett left (get this.heap this.left-index))
  (gett right (get this.heap this.right-index))
  (gett parent (get this.heap this.parent-index)))
(export Heapable)
(define Binary-heap Heapable
  (interface Heapable)
  (gett heap this.*heap)
  (gett index this.*index)
  (sett index v (assign this.*index v))

  (init (  (*heap [])) )

  (def clear ()
    (assign this.heap.length 0)
    )
  (def-generic includes (heapable heap)
    (= heapable (get heap heapable.index))

    )
  (def-generic heapify (*heap)
    (for-of! heapable *heap
             (.*sift-down this
                          heapable.index
                          heapable.left-index
                          heapable.right-index
                          *heap))
    *heap)
  (def get-min () this.root)
  (def-generic update-by-index (index heap)
    (const node (get heap index))
    (.*sift-up this index node.parent-index heap))
  (def-generic extract-min (min-val heap)
    (if! (not heap.length)
         (return null))
    (var new-root (last heap))
    (assign (first heap) new-root)
    (assign (last heap) min-val)
    (assign new-root.index 0)
    (assign min-val.index null)
    (.pop heap)
    (.*sift-down this 0 new-root.left-index new-root.right-index)
    (return min-val))
  (def-generic insert (heapable heap)
    (if! (not heapable.heap) (throw (new Type-error "Inserting non heapable value")))
    (if! (!= heapable.heap heap) (throw (new Type-error "Inserting heapable to wrong heap")))
    (assign heapable.index heap.length)
    (.push heap heapable)
    (.*sift-up this heapable.index heapable.parent-index heap)
    )

  (def-generic *sift-up (index parent-index heap)
    (while (and (!= index 0)
                (= (.compare-to (get heap index )
                                (get heap parent-index )) -1))
      (const current-node (get heap index))
      (assign current-node.index parent-index)

      (const parent-node (get heap parent-index))
      (assign parent-node.index index)

      (set heap index parent-node)
      (set heap parent-index current-node)

      (assign index parent-index)
      (assign parent-index (get heap index 'parent-index)))
    )

  (def-generic *sift-down (index left-index right-index heap)
    (while (or (and (< left-index heap.length)
                    (= (.compare-to (get heap index )
                                    (get heap left-index  ))
                       1))
               (and (< right-index heap.length)
                    (= (.compare-to (get heap index )
                                    (get heap right-index ))
                       1)))
      (const smallest-child-index (if (or (>= right-index heap.length)
                                          (= (.compare-to (get heap left-index )
                                                          (get heap right-index))
                                             -1))
                          left-index
                          right-index))
      (var smallest-node (get heap smallest-child-index))
      (var current-node (get heap index))
      ;; (print (lit smallest-node current-node))

      (assign smallest-node.index index)
      (assign current-node.index smallest-child-index)

      (set heap index smallest-node)
      (set heap smallest-child-index current-node)

      (assign index smallest-child-index)
      (assign left-index smallest-node.left-index
              right-index smallest-node.right-index))))
(export Binary-heap)
