(import Spawnable "../spawnable.js")
(import "../list.js")

(define Binary-search-tree  Spawnable
  (init ((key null)
         (parent null)
         (values (.spawn List))))

  (gett has-one-child? (or (not this.left) (not this.right)))
  (gett has-two-children? (and this.left this.right))
  (gett root
        (var node this)
        (while node.parent
          (assign node node.parent))
        (return node)
        )

  (gett grandparent this.parent.parent)
  (gett is-leaf? (and (not this.left) (not this.right)) )

  (gett successor
        (var temp this)
        (while temp.left
          (assign temp temp.left))
        (return temp))

  ;; (gett is-root? (= this this.root))
  (gett is-root? (not this.parent))
  (gett uncle (if (or (not this.parent) (not this.grandparent))
                  null

                  this.parent.is-on-left?
                  this.grandparent.right

                  this.grandparent.left))

  (gett is-on-left? (= this this.parent.left))
  (gett sibling (if (not this.parent)
                    null
                    this.is-on-left?
                    this.parent.right

                    this.parent.left))
  (def move-down (n-parent)
    ;; (.check-colors this)
    (if this.parent
        (if this.is-on-left?
            (assign this.parent.left n-parent)
            (assign this.parent.right n-parent)))
    (assign n-parent.parent this.parent)
    (assign this.parent n-parent))

  (def swap-keys (node)
    (const temp this.key)
    (const temp2 this.values)

    (assign this.key node.key)
    (assign this.values node.values)
    (assign node.key temp)
    (assign node.values temp2)
    )

  (def-generic rotate-left ()
    (const n-parent this.right)

    (.move-down this n-parent)

    (assign this.right n-parent.left)

    (if n-parent.left (assign n-parent.left.parent this))

    (assign n-parent.left this))

  (def-generic rotate-right ()
    (const n-parent this.left)

    (.move-down this n-parent)

    (assign this.left n-parent.right)

    (if n-parent.right (assign n-parent.right.parent this))

    (assign n-parent.right this))

  (def-generic set (key value )
    (if (or (not this.key) (= key this.key) )
        (do (set this 'key key )
            (.push this.values value))
        (< key this.key)
        (if this.left
            (.set this.left key value)
            (assign this.left
                    (.set
                     (.spawn Binary-search-tree
                             null
                            this) key value)))

        (> key this.key)
        (if this.right
            (.set this.right key value)
            (assign this.right (.set (.spawn Binary-search-tree
                                             null
                                             this)
                                     key value))))
    this)

  (def map (f)
    (const r (.spawn this.proto))
    (each this (node k)
          (.set r k (f node k) ))
    (return  r))

  (def each-node (f)

    (if this.left (.each-node this.left f))
    (if this.right (.each-node this.right f))
    (f this))

  (def each (f)
    (if this.left (.each this.left f))
    (if this.right (.each this.right f))
    (.each this.values (=> (v) (f v this this.key))))

  (def remove (key value)
    (doc-string "shared.datastructures.trees.binary-search-tree.remove"
                "key: A numeric key, value: A value to be removed."
                "Search the tree as deep as needed to find and remove a value")
    (const branch (.search this key ))
    (if (.remove branch.values value)
        (if (= branch.values.length 0)
            (assign this.key null))))

  (def prune (key)
    (doc-string "shared.datastructures.trees.binary-search-tree.prune"
                "key: A numeric key"
                "Search the tree for a key, removing the branch"))
  (def-generic search (key )
    (doc-string "shared.datastructures.trees.binary-searchtree.search"
                "key: A numeric key."
                "Search the tree for a key, returning the branch."
                )
    (if (= key this.key)
        this
        (and (< key this.key) this.left)
        (.search this.left key )
        (and (> key this.key) this.right)
        (.search this.right key )
        this))

  (def-generic find-range (low high (answer []))
    (if (and (>= this.key low) (<= this.key high))
        (do (if this.left (.find-range this.left low high answer))
            (.push answer this)
          (if this.right (.find-range this.right low high answer)))
        (and (< this.key low) this.right)
        (.find-range this.right low high answer)
        this.left
        (.find-range this.left low high answer))
    (return answer))
  (def-generic for-each-in-range (low high (f (-> null) ))
    (if (and (>= this.key low) (<= this.key high))
        (do (if this.left (.for-each-in-range this.left low high f))
            (.each this.values f)
          (if this.right (.for-each-in-range this.right low high f)))
        (and (< this.key low) this.right)
        (.for-each-in-range this.right low high f)
        this.left
        (.for-each-in-range this.left low high f)))
  )

(export Binary-search-tree)
