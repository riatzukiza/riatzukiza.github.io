(import Vector "../../vectors.js")
(import Trie "../../data-structures/trees/trie.js")
(import Spawnable "../../data-structures/spawnable.js")

(define Sparse-vector-field Spawnable
  (doc-string "DataStructures.fields.Sparse")

  (init ((*data (.spawn Trie))))
  (gett data this.*data)

  (def *equation (x y t t* v v*)
    (doc-string "DataStructures.Sields.Sparse.*equation"
                "x y t t* v v* "
                "An abstract method used to determine the value of a cell at a given time step."
                "By default it throws an error"
                )
    (throw (new Error "No field equation defined")))
  (def *context (x y t t* v v*)
    (doc-string "DataStructures.Fields.Sparse.*context"
                "x y t t* v v* "
                "If defined, configures variables specific to the given implementation."))

  (def-generic equation (x y t data)
    (doc-string "DataStructures.Fields.Sparse.equation"
                "x y tdata"
                "Calculates the value of the vector field at the given location and time."
                "Clears the previous time step"
                "if the value calcuated is a null vector, it clears it from the field."
                )
    (const cell (.insert data [x y]))
    (const v* (if cell.last-tick
                  (.get cell [cell.last-tick])
                  null))
    (const v (.set cell [t] (if v* (.spawn Vector v*.x v*.y)
                              (.spawn Vector 0 0)
                              )))

    (.*context this x y t cell.last-tick v v* )
    (.*equation this x y t cell.last-tick v v* )

    (when v* (.despawn v*) (.delete cell [cell.last-tick]))

    (assign cell.last-tick t)
    (if (and (< v.x 0) (< v.y 0))
        (do (.despawn v)
            (.delete cell [t])))
    (return v))

  (def-generic get (x y t data)
    (assign p [(Math.round x)
               (Math.round y)
               t])
    (if (.has data p)
        (.get data p)
        (.equation this x y t data))))
(export Sparse-vector-field)
