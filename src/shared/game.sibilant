(import Entity-system "./ecs.js")
(import Event-emitter "./kit/events/index.js")
(import Ticker "./ticker.js")
(import Ordered-map "./data-structures/maps/ordered.js")
(import Interface "./kit/interface/index.js")

(import Saveable "/shared/saveable.js")

(import Rendering "/shared/systems/rendering/rendering.js")

(define Game Saveable
  (init (config
         (system-types [])
         (game-speed 1)
         (units [])
         (entity-groups [])
         (entities ((create Entity-system) this) )
         (ticker ((create Ticker) (* game-speed 60)))
         (systems ((create Ordered-map))))
        (.register this))

  (*non-serializable-keys ['rendering])
  (def-generic register (systems system-types config)

    (assign this.rendering (.load Rendering
                            (lit (dimensions
                                  [(* 1 (first config.dimensions))
                                   (* 1 (second config.dimensions))])
                                 (blend true))))

    (set this.rendering
         'background-color
         (lit (r 0) (g 0) (b 0) (a 255)))

    (var get-system-by-symbol systems.get
         set-system-by-symbol systems.set)

    (assign systems.get-by-symbol get-system-by-symbol)
    (def systems.get (proto ent)
      (var sys (get-system-by-symbol.call systems proto.symbol))

      (if ent (.get sys ent)
          sys))

    (.each system-types (=> (s) (.push systems [s.symbol ((create s) this)])))
    ;; (.push this.systems [this.rendering.symbol this.rendering])
    )

  (gett ent this.entities)
  (gett game this)
  (gett process this)
  (gett events Ticker.events)

  (def-generic add (s systems game) (.push systems [s.symbol ((create s) this)]))

  (def-generic pause (ticker events)
    (make-promise
     (.once events 'tick
            (-> (.stop ticker)
                (success)))))
  (def-generic unpause (ticker events)
    (make-promise
     (.once events 'tick success)
     (.start ticker)))

  (def-generic start (systems events ticker rendering)

    (.start ticker)
    (.emit events 'start this)

    (on events 'tick (t)
        (.each systems (#-> (.update )))
        (.update rendering)
        ))

  (def-generic stop (ticker events)
    (.stop ticker)
    (.remove-all-listeners events 'tick))

  (def-generic clear (systems entities events ticker)
    (.stop ticker)
    (.clear entities )
    (.remove-all-listeners events)
    (.each systems (#-> .clear))))

(export Game)
