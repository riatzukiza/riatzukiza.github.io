(import List "./data-structures/list.js")
(import Pooled-data-structure "./data-structures/pooled.js")
(import Dynamic-pool "./pooling/dynamic-pool.js")
(import Spawnable "./data-structures/spawnable.js")

(define Vector Spawnable
  (init ((*x 0) (*y 0))
        (if (or (isNaN *x) (isNaN *y))
            (throw (new Error "Vector parameter is NaN")))
        )
  (gett x this.*x)
  (gett y this.*y)

  (sett x x (if (isNaN x) (throw (new Error "Setting vector x to nan")))(assign this.*x x))
  (sett y y
        (if (isNaN y) (throw (new Error "Setting vector y to nan")))
        (assign this.*y y))

  (def add (v) (.spawn Vector (+ this.x v.x) (+ this.y v.y)))
  (def add-to (v)
    (incr-by this.x v.x)
    (incr-by this.y v.y)
    (if (or (isNaN this.x) (isNaN this.y))
        (throw (new Error "Vector parameter is NaN")))
    this
    )
  (def sub (v) (.spawn Vector (- this.x v.x) (- this.y v.y)))
  (def sub-from (v)
    (assign this.x (- this.x v.x))
    (assign this.y (- this.y v.y)))
  (def mult (n) (.spawn Vector (* this.x n) (* this.y n)))
  (def mult-to (n)
    (assign this.x (* this.x n))
    (assign this.y (* this.y n))
    this)
  (def div (n) (.spawn Vector  (/ this.x n) (/ this.y n)))

  (def div-to (n)
    (assign this.x (/ this.x n))
    (assign this.y (/ this.y n))
    (if (or (isNaN this.x) (isNaN this.y))
        (throw (new Error "Vector parameter is NaN")))
    this
    )
  (def set-angle (angle)
    (const length (.get-length this))
    (assign this.x (* (Math.cos angle) length))
    (assign this.y (* (Math.sin angle) length))
    (if (or (isNaN this.x) (isNaN this.y))
        (throw (new Error "Vector parameter is NaN")))
    )
  (def set-length (length)
    (const angle (.get-angle this))
    (assign this.x (* (Math.cos angle) length))
    (assign this.y (* (Math.sin angle) length))
    (if (or (isNaN this.x) (isNaN this.y))
        (throw (new Error "Vector parameter is NaN")))
    this)

  (def get-angle ()
    (Math.atan2 this.y this.x))

  (def get-length ()
    (Math.hypot this.x this.y))
  (def get-length-sq ())
  (def distance-to (v) (.sub this v))
  (def distance-to-sq (v))
  (def manhattan-distance-to ())
  (def copy ())
  (def rotate (angle)
    (.spawn Vector
            (- (* this.x (Math.cos angle))
               (* this.y (Math.sin angle)))

            (- (* this.x (Math.sin angle))
               (* this.y (Math.cos angle)))
            )
    )
  (def rotate-to (angle)

    (const x (- (* this.x (Math.cos angle))
                (* this.y (Math.sin angle))))

    (const y (- (* this.x (Math.sin angle))
                (* this.y (Math.cos angle))))
    (set this 'x x 'y y)
    this)
  (def rotate-around (v angle))
  (def rotate-me-around (v angle))
  (def equals (v))


  ;; (def despawn () (.release vector-pool this))
  ;; (def spawn (x y) (.init (.aquire vector-pool) x y))
  (def clear ()
    (assign this.x 0)
    (assign this.y 0)
    )

  )
(export Vector)
(define Trail-vector Spawnable
  (init (x y pheremones))
  (def clear ()
    (assign this.x null)
    (assign this.y null)
    (assign this.pheremones null)
    )
  ;; (def spawn (x y pheremones) (.init (.aquire trail-pool) x y pheremones))
  ;; (def despawn () (.release trail-pool this))
  )

(export Trail-vector)

(const  vector-pool ((create Dynamic-pool) Vector))
(const  trail-pool ((create Dynamic-pool) Trail-vector))
(export vector-pool)
(export trail-pool)
