(namespace shared)
(import-namespace async)

(import Interface "@shared/kit/interface/index.js")
(import Database "@shared/database.js")
(const dbs (new Map))
(def get-database (name) (remember dbs name ((create Database) name )))

(macro method* (name args ..body)
       ["*"name  `(parenthetic (comma @args.contents))
           `(curly (do-block ...@body))])
(def-lit-macro def-async (name args ...body)
  [" async "name  `(parenthetic (comma @args.contents))
            `(curly (do-block ...@body))])

(def-lit-macro def-async* (name args ...body)
  [" async *"name  `(parenthetic (comma @args.contents))
             `(curly (do-block ...@body))])

(def-lit-macro def-generic* (name args ...body)
  `(generic @name (method*) @args ...@body))
(define Saveable Interface

  (*non-serializable-keys [])

  (cached loaded-instances (new Map))
  (cached save-index
          (if this.current-save-index
              (++ this.current-save-index)
              (assign this.current-save-index 0)))

  (def *filter-serializable (key value)
    (not (.includes this.*non-serializable-keys key)))


  (def *injestion-target () (Object.create this))

  (def-generic injest-property (data)
    (if data.save-index
        (do (const instance (.load (get *types data.collection-name)
                                   save-name
                                   data.save-index
                                   database))
            (if instance.register
                (.register instance))
         instance)
        data.interface-reference
        (get *types data.interface-reference)
        (Array.is-array data)
        (map data (value)
             (.injest-property Saveable value save-name database))

        (instance-of?  Set data)
        (do (const set (new Map))
            (for-of!  value data
                     (.add set  (.injest-property Saveable value data)))
         map)
        (instance-of?  Map data)
        (do (const map (new Map))
            (for-of! [key value] data
                     (.set map key (.injest-property Saveable value data)))
          map)

        data))
  (def-generic injest (serialized-object
                       save-name
                       (database ((create Database) save-name))
                       (r (this.*injestion-target))
                       *types)
    (each (Object.keys serialized-object) (key)
          (const data (get serialized-object key))
          (set r key (.injest-property Saveable data )))
    (return r))

  (def get-serializable-properties ()
    (pipe (Object.get-own-property-descriptors this)
          (Object.entries)
          (filter ([key describer])
                  (and (.has-own-property describer 'value)
                       (!= (typeof describer.value) 'function)
                       (.*filter-serializable this key describer.value)))))
  (def get-saveable-members ()
    (doc-string "shared.saveable" "no args"
                "get all property entries which implement the saveable interface.")
    (pipe (.get-serializable-properties this)
          (filter ([key describer])
                  (or (and (Object.has-own  describer.value 'save)
                        (Object.has-own  describer.value 'load))
                      (and (Array.is-array describer.value)
                           (some describer.value (value)
                                 value.save))
                      (and (instance-of?  Map describer.value)
                           (some (Array.from (.values describer.value)) ( value)
                                  value.save))))
          (map ([key describer])
               (if (instance-of?  Map describer.value)
                   (filter  (Array.from (.values describer.value)) ( value) value.save)
                   (Array.is-array)
                   (filter describer.value (value) value.save)
                   describer.value))
          (.flat)))
  (def-generic serialize ()
    (const serialized-object
           (lit
            (type-name this.name)
            (save-id  this.save-id)))
    (pipe (this.get-serializable-properties)
          (reduce  serialized-object (result  [key describer])
                   (set result key (if describer.value.save
                                       (lit (collection-name describer.value.name)
                                            (save-index describer.value.save-index))
                                       describer.value.symbol
                                       (lit (interface-reference describer.value.name))
                                       (instance-of?  Map describer.value)
                                       (do (const map (new Map))
                                           (for-of! [key value] describer.value
                                                    (.set map key (if value.serialize
                                                                      (.serialize value)
                                                                      value)))
                                         map)
                                       (!= (typeof describer.value) "object")
                                       (set result key describer.value)))
                   result)))

  (def-generic save (save-name (database ((create Database) save-name)))
    (.put database this.name (.serialize this))
    (each (.get-saveable-members this) (key describer )
          (.save describer.value save-name database)))

  (def-async load-all ()
    (const r [])
    (for-of! p (.get-cursor this.db this.name)
             (const obj (await p))
             (cache this.loaded-instances save-index
                    (.injest this obj)))
    (return r))
  (def-generic load (save-name (save-index 0) (database ((create Database) save-name)))
    (cache this.loaded-instances save-index
           (pipe (.get database [this.name save-index])
                 (then data (.injest this data save-name save-index database)))))
  (def-async delete ()))
(export Saveable)
