(require! Quad-tree  "@timohausmann/quadtree-js")

(import Component System "../ecs.js")
(import Physics "./physics.js")
(import Vector "../vectors.js")
(import Trie "../data-structures/trees/trie.js")
(import List "../data-structures/list.js")
(import Dynamic-pool "../pooling/dynamic-pool.js")
(import Pooled-data-structure "../data-structures/pooled.js")


(def-lit-macro def-curried (name args ...body) `(property @name (R.curry (lambda @args ...@body))))
;; (define Bounding-box Pooled-data-structure
;;   (init (x y height width)))

(define Collision-bounds Component
  (def *clear () )

  (gett dimensions this.area)
  (gett dim this.dimensions)

  (gett scale this.entity.physical-properties.scale)
  (gett physics this.entity.physical-properties)
  (gett x this.entity.position-interface.x)
  (gett y this.entity.position-interface.y)

  ;; (gett x this.pos.x)
  ;; (gett y this.pos.y)
  (gett height this.entity.physical-properties.scale )
  (gett width this.entity.physical-properties.scale)


  ;; (gett height (*  2 this.scale))
  ;; (gett width (* 2 this.scale))

  ;; (gett bounding-box (.spawn Bounding-box c))

  (gett max-x (+ this.entity.position-interface.x (* this.entity.physical-properties.scale 0.5)))
  (gett max-y (+ this.entity.position-interface.y (* this.entity.physical-properties.scale 0.5)))

  ;; (gett max-x (+ this.x (/ this.scale 2)))
  ;; (gett max-y (+ this.y (/ this.scale 2)))

  ;; (gett max-x (- this.x this.scale))
  ;; (gett max-y (- this.y this.scale))

  ;; (gett max-x this.x)
  ;; (gett max-y this.y)

  ;; (gett min-x (- this.x this.scale))
  ;; (gett min-y (- this.y this.scale))

  ;; (gett min-x (- this.x (/ this.scale 2)))
  ;; (gett min-y (- this.y (/ this.scale 2)))

  ;; (gett min-x (+ this.x this.scale))
  ;; (gett min-y (+ this.y this.scale))


  (gett min-x (- this.entity.position-interface.x (* this.entity.physical-properties.scale 0.5)))
  (gett min-y (- this.entity.position-interface.y (* this.entity.physical-properties.scale 0.5)))

  (gett position this.entity.position-interface)
  (gett pos this.position)
  (gett velocity this.entity.velocity-interface)

  (def-generic is-colliding?  (c* (c this))


    (var d1x (- c*.min-x c.max-x) d1y (- c*.min-y c.max-y) d2x (- c.min-x c*.max-x) d2y (- c.min-y c*.max-y))

    (not (or (>= d1x 0) (>= d1y 0) (>= d2x 0) (>= d2y 0)))))

(export Collision-bounds)

(define Collision System

  (Component Collision-bounds)


  (def-generic set-bounds ((height 100) (width 100)
                           (max-objects 10)
                           (max-levels 10))
    (if! this.quads (throw (new Error "bounds are already set")))

    (assign this.quads (new Quad-tree
                            (lit (x 0)
                                 (y 0)
                                 width,height)
                            max-objects
                            max-levels)))
  (def *check  (c c*)
    (if! (.is-colliding? c c*)
         (.emit c.system.game.events "collision"
               c c*))
      (return))

  (def-generic *update-all (t components)
    (.clear this.quads)

    (var node this.components.values.head)
    (while! node
            (var c node.item)
            (assign c.checked false)
            (.insert this.quads c)
            (assign node node.next))

    (assign node this.components.values.head)
    (while! node
            (var c node.item)
            (const possible-collisions (.retrieve this.quads c))
            (for-of! c* possible-collisions
                     (if! (and (not (= c c*)) (not c*.checked))
                          (.*check this c c*))
                     null)
            (assign c.checked true)
            (assign node node.next))
    (return null))
  )
(export Collision)

(def-generic place-entity (entity game config)
  (const placement-tree (new Quad-tree
                             (lit (x 0)
                                  (y 0)
                                  (width (first config.dimensions))
                                  (height (second config.dimensions)))
                             20
                             500))
  (const c (.get game.systems Collision entity))

  (const placement-vector (.spawn Vector 1 1 ))


  (var colliding true)

  ;; (print "checking for collisions at" c.x c.y)
  (while colliding

    (var no-collisions true)
    ;; (const placed-entities (.spawn Trie))
    ;; (const placed-entities (new Map))

    (.clear placement-tree)
    (each  c.system.components (c*)
           (unless (= c c*)
             ;; (const pos [ c*.pos.x c*.pos.y c*.entity])
             ;; (.set placed-entities pos c*)
             (.insert placement-tree c*)))

    (const possible-collisions (.retrieve placement-tree c))
    (for-of! c* possible-collisions
             ;; (const node (.find placed-entities [pc.x pc.y]))
             ;; (while (.is-colliding? c c*.value)
             (while (.is-colliding? c c*)
               ;; (print "colliding" c c*)

               (assign no-collisions false)
               (.set-length placement-vector (* 1 c*.scale) )
               ;; (.set-length placement-vector 1 )
               (.set-angle placement-vector (random-float 360))

               (c.pos.system.shift c.pos [placement-vector.x placement-vector.y])))
    ;; (print "colliding?" no-collisions)
    (if no-collisions (assign colliding false))

    ;; (.despawn placed-entities)
    null)

  (.despawn placement-vector)

  entity)
(export place-entity)
