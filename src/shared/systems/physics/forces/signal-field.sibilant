(import Position "/shared/systems/position.js")
(import Physics "/shared/systems/physics/system.js")
(import Collision "/shared/systems/collision.js")



(define SignalField Physics.Force

  (template true)

  (gett config (throw (Error "No config provided for signal-field force sub system")))
  (gett game (throw (Error "No game object provided for signal-field force sub system")))
  (gett entities (throw (Error "No entities object provided for signal-field force sub system")))
  (gett update-particle (throw (Error "No update particle function provided for signal-field force sub system")))
  (gett field (throw (Error "No noise field layer (this.field)  provided for signal-field force sub system")))
  (gett layer (throw (Error "No signal field layer (this.layer)   provided for signal-field force sub system")))

  (def-generic apply (c, field, layer config game entities update-particle)
    (var v c.velocity)
    (var collision (.get c.system.process.systems Collision c.entity))
    (update-particle v, v.pos, field, layer, game.ticker.ticks,
                     false,
                     false,
                     entities.home-pos)
    (var win-rate (/ v.entity.ant-life.win-count (or (+ 1 v.entity.ant-life.loose-count) 1)))

    (assign c.scale (+ 5 (* 2 (if (> win-rate 1) win-rate 1))))
    (assign c.mass (* 10 (if (> win-rate 1) win-rate 1)))

    ))
(export SignalField)

