(import Component System "/shared/ecs.js")
(import Velocity "/shared/systems/velocity.js")
(import Position "/shared/systems/position.js")
(import Interface "/shared/kit/interface/index.js")

(define Physical-properties Component

  (*scale 1)
  (*mass 1)

  (prior-mass 0)
  (prior-scale 0)

  (forces [])
  (gett prior-density (/ this.prior-mass this.prior-volume))
  (gett prior-volume (Math.pow this.prior-scale 3))

  (gett scale this.*scale)
  (gett mass this.*mass)

  (sett scale s
        (set this 'prior-scale this.scale
             '*scale s))
  (sett mass m
        (set this 'prior-mass this.mass
             '*mass m))

  (gett density (/ this.mass this.volume))
  (gett volume (Math.pow this.scale 3))

  (gett velocity this.entity.velocity-interface)

  (gett position this.entity.position-interface)
  (gett location this.position)
  (def *clear ()
    (assign this.*mass null)
    (assign this.*scale null)
    (assign this.prior-scale null)
    (assign this.prior-mass null)
    (assign this.forces [])
    ))

(export Physical-properties)

(define Physics System
  (Component Physical-properties)
  (*forces [])

  (def-generic register-force (F *forces)
    (print "registering force" F)
    ((create F) this))

  (def-generic register (forces)
    (assign this.*forces (.map forces (=> (F) (.register-force this F forces)))))

  (gett forces this.*forces)

  (def *update-component (c)
    (.each c.forces (#-> (.apply c)))))

(export Physics)

(define Physics.Force Interface
  (init (physics)
        (.register this))
  (template true)
  (def build ()
    (unless (or this.template (= this.name 'Physics.Force))
         (print "Physics.Force.build" "adding force to physics" this)
         (.push Physics.forces this)))

  (def-generic apply (physical-properties)
    (throw (new (Error "force does not have an applicator.")))))



