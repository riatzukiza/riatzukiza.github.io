(import Component  System "../ecs.js")
(import Vector "../vectors.js")
(import Position "./position.js")

(define Velocity-interface Component
  (gett xd this.vector.x)
  (gett yd this.vector.y)
  (sett xd x (if (isNaN x) (throw (new Error "assigning non number to velocity")))
        (assign this.vector.x x))
  (sett yd y
        (if (isNaN y) (throw (new Error "assigning non number to velocity")))
        (assign this.vector.y y))


  (def register ()
    (unless this.vector (assign this.vector (.spawn Vector 0 0))))

  (gett pos this.entity.position-interface)

  (def *clear ()
    (assign this.xd null)
    (assign this.yd null)
    (assign this.prior-x null)
    (assign this.prior-y null)
    )

  (def accelerate ([v1,v2])
    (incr-by this.xd v1)
    (incr-by this.yd v2)
    this
    )
  )
(export Velocity-interface)

(define Velocity System

  (Component Velocity-interface)
  (real-time? true)
  (def *update-component (m)

    (var p m.pos (lit xd yd) m)

    (assign m.moved false)
    (unless (and (= xd 0)
                 (= yd 0))

      (assign m.prior-x p.x)
      (assign m.prior-y p.y)
      (assign m.moved true)

      (.emit this.game.events 'move m)
      (if this.real-time?
          (set p
               'x (+ p.x (* xd (/ this.game.ticker.elapsed 1000)))
               'y (+ p.y (* yd (/ this.game.ticker.elapsed 1000))))
          (set p
               'x (+ p.x xd)
               'y (+ p.y yd))))))

(export Velocity)
