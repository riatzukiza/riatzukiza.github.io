
(import Component System "../ecs.js")

(define Position-interface Component
  (*x 0)
  (*y 0)
  (z 0)
  (gett x this.*x)
  (gett y this.*y)

  (sett y y

        (if! (not this.moved) (.push this.system.queue this))
        (assign this.*y y this.moved true))
  (sett x x
        (if! (not this.moved) (.push this.system.queue this))
        (assign this.*x x this.moved true))

  (def *clear ()
    (assign this.x null)
    (assign this.y null)
    (assign this.z null)
    (assign this.moved false)
    ))

(export Position-interface)

(define Position System

  (Component Position-interface)
  (queue [])

  (def shift (c [xshift yshift])
    (set c 'x (+ c.*x xshift)
         'y (+ c.*y yshift)))

  (def move (entity (lit x y))

    (var c (.get this.components entity))
    (set c 'x x 'y y))
  (def *update-all ()
    (while! (> this.queue.length 0)
      (.*update-component this (.pop this.queue)))
    null)
  (wraps? true)

  (def *update-component (c)
    (when this.wraps?
      (if (< c.*x 0) (assign c.*x (+ c.*x (first this.process.rendering.dimensions))))
    (if (< c.*y 0) (assign c.*y (+ c.*y (second this.process.rendering.dimensions))))
        (set c
             '*x (mod c.*x (first this.process.rendering.dimensions))
             '*y (mod c.*y (second this.process.rendering.dimensions))))
    (assign c.moved false)
    ))


(export Position)
