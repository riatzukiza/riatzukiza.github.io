
(import Component  System "../../ecs.js")
(import Physics "../physics.js")
(import Position "../position.js")
(import Gl "../../gl.js")
(import Vector "../../vectors.jsd")
(import Andy "../../andy.js")
(import Renderable "./renderable.js")


(def set-point (x y z vert)
  (set vert.point
       'x x
       'y y
       'z z))

(define Sprite-renderable Renderable

  (init (layer))

  (structure (new Andy.Gl.Type.Composite
                  (lit (point Andy.Type.Vector3)
                       (size Andy.Type.float)
                       (rotation Andy.Type.float)
                       )))

  (def clear ()
    (set-point 0 0 0 this)
    (assign this.point.scale 0)
    )

  (def despawn ()
    (.despawn this.layer this))
  )

(export Sprite-renderable)

(macro read-shader (path)
       (require! 'fs)
       (print "loading shader" path.token)
       ["`" (fs.read-file-sync (eval path.token) "utf8") "`"])




(define uniforms Interface
  (init (game))
  (gett res (-> (Gl.uniform 'Vector2 "Resolution" this.game.config.dimensions)))
  (gett zoom (-> (Gl.uniform 'Vector3 "Zoom" [ 1.0 1.0 this.game.rendering.zoom-level  ])))
  (gett offset (-> (Gl.uniform 'Vector3 "Offset" [ this.game.rendering.x-offset this.game.rendering.y-offset 0.0  ])))
  (gett scale  (-> (Gl.uniform 'Float "Scale" this.game.rendering.zoom-level)))
  (id 0)
  (gett sprite-texture (Gl.uniform 'Integer "SpriteTexture" (incr this.id)))


  ;; need a uniform later to have more than one sprite.
  )


(define shaders Interface


  (vert (read-shader "./shaders/sprite.vert"))
  (frag (read-shader "./shaders/sprite.frag")))


(define Texture Interface
  (init (img context id (texture (.create-texture gl)))
        (const gl context.gl)

        (.bind-texture gl gl.TEXTURE_2D texture)
        (.texImage2D gl gl.TEXTURE_2D 0 gl.RGBA  gl.RGBA gl.UNSIGNED_BYTE img)
        (.generate-mipmap gl gl.TEXTURE_2D)
        (print context.canvas)

        )
  (gett gl  this.context.gl)
  (def-generic enable (img texture gl)

    (.active-texture gl (+ gl.TEXTURE0 this.id))
    (.bind-texture gl gl.TEXTURE_2D texture)
    ))
(def sprite-layer (limit texture-data game)

  (.init uniforms game)

  (var id uniforms.id)
  (const layer (.spawn game.rendering limit Sprite-renderable
                       [uniforms.res
                        uniforms.scale
                        uniforms.zoom
                        uniforms.offset
                        uniforms.sprite-texture
                        ]
                       [shaders.vert shaders.frag]))
  (assign layer.texture ((create Texture)
                         texture-data
                         game.rendering.context
                         id
                         ))
  layer)

(define Sprite Component


  (gett pos this.entity.position-interface)
  (gett scale this.entity.physical-properties.scale)
  (gett point this.sprite.point)
  (gett rotation this.sprite.rotation)

  (def register () (unless this.sprite (assign this.sprite (.spawn this.system.sprites))))


  (def *clear ()
    (assign this.point.x 0)
    (assign this.point.y 0)
    (assign this.point.z 0)
    (assign this.sprite.size 0)))

(export Sprite)

(define Sprites System
  (max-sprites 100000)
  ;; (gett img (throw (new Error "no image defined for sprite system")))
  (def register ()
    (assign this.sprites (sprite-layer this.max-sprites this.img this.game)))

  (interface Sprite)

  (def spawn (entity )
    (var c (.call System.spawn this entity ))
    c)

  (gett texture this.sprites.texture)
  (def *prepare ()
    (.enable this.texture))
  (def *update-component (dot)
    (var rotation-vector (.spawn Vector dot.entity.velocity-interface.xd dot.entity.velocity-interface.yd))
    (.set-length rotation-vector 1)
    (const angle (.get-angle rotation-vector))

    (set dot.sprite 'rotation angle)
    (set dot.sprite.point
         'x dot.pos.x
         'y dot.pos.y
         'z dot.pos.z)
    ;; (print rotation-vector angle dot.sprite)

    (set dot.sprite 'size (* 1.1 dot.scale))
    (.despawn rotation-vector)
    ))

(export Sprites)
