(import Component  System "../../ecs.js")
(import Physics "../physics.js")
(import Position "../position.js")
(import Gl "../../gl.js")
(import Vector "../../vectors.js")
(import Andy "../../andy.js")
(import Renderable "./renderable.js")
(import Interface "/shared/kit/interface/index.js")



(def set-point (x y z vert)
  (set vert.point
       'x x
       'y y
       'z z))

(define Sprite-atlas-renderable Renderable

  (init (layer))

  (structure (new Andy.Gl.Type.Composite
                  (lit (point Andy.Type.Vector3)
                       (size Andy.Type.float)
                       (alpha Andy.Type.float)
                       (sprite-startUV Andy.Type.Vector2)
                       (sprite-endUV Andy.Type.Vector2)
                       )))

  (def clear ()
    (set-point 0 0 0 this)
    (assign this.point.scale 0)
    )

  (def despawn ()
    (.despawn this.layer this))
  )

(export Sprite-atlas-renderable)

(macro read-shader (path)
       (require! 'fs)
       (print "loading shader" path.token)
       ["`" (fs.read-file-sync (eval path.token) "utf8") "`"])




(define uniforms Interface
  (init (game))
  (gett res (-> (Gl.uniform 'Vector2 "Resolution" this.game.config.dimensions)))
  (gett zoom (-> (Gl.uniform 'Vector3 "Zoom" [ 1.0 1.0 this.game.rendering.zoom-level  ])))
  (gett offset (-> (Gl.uniform 'Vector3 "Offset" [ this.game.rendering.x-offset this.game.rendering.y-offset 0.0  ])))
  (gett scale  (-> (Gl.uniform 'Float "Scale" this.game.rendering.zoom-level)))
  (id 0)
  (gett sprite-texture (Gl.uniform 'Integer "SpriteTexture" (incr this.id)))


  ;; need a uniform later to have more than one sprite.
  )


(define shaders Interface

  (vert (read-shader "./shaders/sprite-atlas.vert"))
  (frag (read-shader "./shaders/sprite-atlas.frag")))


(define Texture Interface
  (init (img context id (texture (.create-texture gl)))
        (const gl context.gl)

        (.bind-texture gl gl.TEXTURE_2D texture)
        (.texImage2D gl gl.TEXTURE_2D 0 gl.RGBA  gl.RGBA gl.UNSIGNED_BYTE img)        


        ;; (.generate-mipmap gl gl.TEXTURE_2D)
        ;; (gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT)
        ;; (gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT)

        (gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)
        (gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)
        
        ;; (gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR)
        ;; (gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)
        (gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)
        ;; (gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)




        )
  (gett gl  this.context.gl)
  (def-generic enable (img texture gl)

    (.active-texture gl (+ gl.TEXTURE0 this.id))
    (.bind-texture gl gl.TEXTURE_2D texture)
    ))
(def sprite-layer (limit texture-data game)

  (.init uniforms game)

  (var id uniforms.id)
  (const layer (.spawn game.rendering limit Sprite-atlas-renderable
                       [uniforms.res
                        uniforms.scale
                        uniforms.zoom
                        uniforms.offset
                        uniforms.sprite-texture
                        ]
                       [shaders.vert shaders.frag]))
  (assign layer.texture ((create Texture)
                         texture-data
                         game.rendering.context
                         id
                         ))
  layer)


(define  Animated-sprite Component


  (gett pos this.entity.position-interface)
  (gett scale this.entity.physical-properties.scale)
  (gett point this.sprite.point)
  (*column 0)
  (*row 0)
  (*alpha 1)
  (*non-serializable-keys ['sprite])
  (gett column this.*column)
  (gett row this.*row)
  (sett column c (assign this.*column c)
        (.push this.system.queue this))
  (sett row r (assign this.*row r)
        (.push this.system.queue this))
  ;; (gett column (throw (new Error "no current frame defined")))
  ;; (gett row (throw (new Error "No sequence index defined")))
  (gett alpha this.*alpha)
  (sett alpha a
        (assign this.*alpha a)
        (.push this.system.queue this))

  (gett atlas-x-min (+ ;; 0.5
                       (* this.column  (first this.system.frame-dimensions))))
  (gett atlas-y-min (+ ;; 0.5
                       (*  this.row (second this.system.frame-dimensions))))
  (gett atlas-x-max (+  ;; 0.5
                        this.atlas-x-min (first this.system.frame-dimensions)) )
  (gett atlas-y-max (+ ;; 0.5
                       this.atlas-y-min (second this.system.frame-dimensions)) )

  (def register () (unless this.sprite (assign this.sprite (.spawn this.system.sprites))))
  (def redraw ()
    (.push this.system.queue this))


  (def *clear ()
    (assign this.point.x 0)
    (assign this.point.y 0)
    (assign this.point.z 0)
    (assign this.sprite.size 0)))

(export Animated-sprite)

(define Sprite-atlas System
  (max-sprites 100000)
  ;; (gett img (throw (new Error "no image defined for sprite system")))
  (*non-serializable-keys ['sprites 'queue])
  (def register ()
    (assign this.queue [])
    (assign this.sprites (sprite-layer this.max-sprites this.img this.game)))

  (Component Animated-sprite)

  (def spawn (entity )
    (var c (.call System.spawn this entity ))
    (.push this.queue c)
    c)

  (gett texture this.sprites.texture)
  (def *prepare ()
    (.enable this.texture))
  (def *update-all ()
    (.prepare this)
    (while this.queue.length
      (.*update-component this (.pop this.queue))))
  (def *update-component (dot)
    (assign dot.sprite.alpha dot.alpha)
    (set dot.sprite.point

         'x dot.pos.x
         'y dot.pos.y
         'z dot.pos.z)
    (set dot.sprite.sprite-startUV

         'x (/ (+ 0.5 dot.atlas-x-min) this.img.width )
         'y (/ (+ 0.5 dot.atlas-y-min) this.img.height))


    (set dot.sprite.sprite-endUV
         'x (/ (- (+ 0.5 dot.atlas-x-max) 1 ) this.img.width)
         'y (/ (- (+ 0.5 dot.atlas-y-max) 1  ) this.img.height))


    (set dot.sprite 'size (* 0.5 (+ 2 dot.scale)))
    ))

(export Sprite-atlas)

