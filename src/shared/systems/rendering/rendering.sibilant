(import Layer "./layer.js")
(import Pooled-system "../../pooling/pooled-system.js")
(import System "../../ecs.js")
(import Gl "../../gl.js")
(import Scalar "../../math/scalar.js")


(def window.size ()
  [window.inner-width window.inner-height]
  )

(var bound (#-> .bind )
     clear (#-> .clear )
     rendered (#-> .render)

     unbound (#-> .unbind)
     disabled (#-> .disable)

     enabled (#-> .enable))

(def allow-alpha-blending (context)

  (assign context.gl (.get-context context.canvas "webgl2" ))
  ;; (assign context.gl (.get-context context.canvas "webgl2" (lit (alpha false))))

  (.enable context.gl context.gl.BLEND)
  ;; (.blend-equation context.gl context.gl.FUNC_ADD)

  ;; (.disable context.gl context.gl.DEPTH_TEST)
  (.blend-func context.gl gl.ONE gl.ONE_MINUS_SRC_ALPHA)
  ;; (gl.pixelStorei gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL true)
  (.blend-func-separate context.gl
                        context.gl.SRC_ALPHA
                        context.gl.ONE_MINUS_SRC_ALPHA
                        context.gl.ONE
                        context.gl.ONE_MINUS_SRC_ALPHA
                        )
  )


(define Rendering Pooled-system

  (init
   ((dimensions (window.size))
    (blend true )
    (context (Gl.context dimensions blend))
    (layers []))
   (const self  this)
   (assign this.x-offset 0)
   (assign this.y-offset 0)
   (assign this.zoom-level 0.2)

   (var mouse-held false)
   (def context.canvas.onmousedown (e)
     (.prevent-default e)
     (assign mouse-held true))

   (def context.canvas.onmouseup (e)
     (.prevent-default e)
     (assign mouse-held false))
   (def context.canvas.onmousemove (e)
     (.prevent-default e)
     (when mouse-held
       ;; (assign self.x-offset (+ self.x-offset (*  2 e.movement-x (/ 1 self.zoom-level))))
       ;; (assign self.y-offset (+ self.y-offset (*  2 e.movement-y (/ 1 self.zoom-level))))

       (assign self.x-offset (+ self.x-offset (/  (* 2 e.movement-x) self.zoom-level )))
       (assign self.y-offset (+ self.y-offset (/  (* 2 e.movement-y) self.zoom-level )))
       )
     )
   (def  context.canvas.onwheel (e)
     (.prevent-default e)

     (const old-scale (/ 1 self.zoom-level))

     (if (> e.delta-y 0)
         (assign self.zoom-level (Math.max (- self.zoom-level (* self.zoom-level 0.01)) 0.01))
         (assign self.zoom-level (Math.min (+ self.zoom-level (* self.zoom-level 0.01)) 1.0)))


     )
   (if! blend (allow-alpha-blending context))

   (set this.Interface
        'context context
        'rendering this)


   (.call Pooled-system.init this ))

  (Interface Layer)

  (sett background-color (lit r g b a)
        (pipe this.context
              .make-current
              (.clear-color  0 0 0 1))

        )


  (def-generic resize ([ width height] context)
    (.resize context width height))

  (def load ((lit dimensions  blend))
    ((create Rendering ) dimensions  blend))

  (def-generic update (layers context blend)
    "render each visible dot to the screen"

    (.each layers rendered)))

(export Rendering)
