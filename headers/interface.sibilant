(namespace interface)
(import-namespace kit)

(macro in (  o k) [k " in " o])
(macro define (name base ...body)
       `(loose-var @name (.define @base (quote @name)
                                  (lit ...@body))))


(macro token-of (node) `(get @node 'token))

(macro loose-var (...body)
       (bulk-map body (=> (name value )
                          (if (.includes name.token ".")
                              `(assign @name @value)
                              `(var @name @value)))))
(meta

 (namespace interface)


 (var init-form   (#-> content-of first (token-of) (=  "init"))
      not-init (#-> init-form not )
      find-init-form (#-> (.find  init-form)
                          (or {contents []})
                          content-of
                          rest))

 (def create-interface (name args body)

   (let ((init-body `(init @ args ...@(find-init-form body)))

         (lit-args (.filter body not-init)))

     `(.define Interface (quote @name) (lit @init-body ...@lit-args))))

 (def macros.create-interface (name args body)

   (let ((init-body `(init @ args ...@(find-init-form body)))

         (lit-args (.filter body not-init)))

     `(.define Interface
               (quote @name)
               (lit @init-body ...@lit-args))))

 (def-lit-macro def-interface (name args ...body)
   `(property @name (create-interface @name @args @body)))

 (def macros.def-interface (name args ...body)
   `(loose-var @name @(.create-interface macros name args body)))
 null)
