(namespace http)
(import-namespace kit)

(def-curried handle-router-error (res e)

  (.write-head res 500)
  (.end res e.message))

(macro route-handler (...body)
       `(=> ((lit request response route))
            (.catch (.resolve Promise (scoped ...@body))
                    (handle-router-error response))))

(macro with-http-route (args ...body)
       `(.use ...@(content-of args)
              (route-handler ...@body)))

(macro token-of (node) `(get @node 'token))

(macro loose-var (...body)
       (bulk-map body (=> (name value )
                          (if (.includes name.token ".")
                              `(assign @name @value)
                              `(var @name @value)))))
(macro add-to-module-lookup (path)
       `(let ( (p "/") (inc @ (or path (process.cwd))))
          (require! 'path)
          (assign module.paths
                  [...module.paths
                   ...(pipe
                       (.split inc path.sep)
                       (.map (=> (el)
                                 (var r (path.join p "node_modules"))
                                 (assign p (path.join p el))
                                 r))
                       (.filter (=> (e) (not (.includes module.paths e))))
                       )])
          null))

(macro clear-source-cache (...paths)
       (map paths (p) (delete (get sibilant.source-cache p)))
       null)
(meta
 (namespace meta)
 (require! Path 'path)
 (var modules (new Set))

 (def macros.unload (...paths)
   (pipe paths
         (.map (=> (p) [p (eval p.token)]))

         (.filter (=> ([p path]) (pipe path modules.has  )))

         (.map (=> ([p path])

                   (print "unloading" path)
                   (.delete modules path)
                   (clear-source-cache path)))))

 (def macros.reload (...paths)
   (.map paths (#-> (tap macros.unload)
                    macros.load)))


 (def macros.load (...paths)
   (pipe paths
         (.map (=> (p) [p (pipe (Path.join sibilant.dir (eval (token-of p)))
                                Path.resolve )]))

         (.filter (=> ([p path]) (pipe path modules.has not )))

         (.map (=> ([p path])
                   (.add modules path)
                   (print "loading" path)
                   `(include @p))))))
