(meta
 

 (var modules (new Set))

 (macro add-to-module-lookup (path)
      (var token (if path path
                   '(process.cwd)))


      `(let ( (p "/") (inc @token))

         (print "adding"  inc "to module path" )
         (require! 'path)
         (assign module.paths
                 [...module.paths
                  ...(pipe
                      (.split inc path.sep)
                      (.map (=> (el)
                                (assign p (path.join p el))
                                (var r (path.join p "node_modules"))
                                r))
                      (.filter (=> (e) (not (.includes module.paths e))))
                      )])
         ))
 (add-to-module-lookup)


 (macro clear-source-cache (...paths)
        (.map paths (=> (p) (delete (get sibilant.source-cache p))))
        null)

 (def macros.unload (...paths)
   (pipe paths
         (.map (=> (p) [p (eval p.token)]))

         (.filter (=> ([p path]) (pipe path modules.has  )))

         (.map (=> ([p path])

                   (print "unloading" path)
                   (.delete modules path)
                   (clear-source-cache path)))))

 (def macros.reload (...paths)
   (.map paths (#-> (tap macros.unload)
                    macros.load)))

 (def macros.load (...paths)
   (pipe paths
         (.map (=> (p) [p (eval p.token)]))

         (.filter (=> ([p path]) (pipe path modules.has not )))

         (.map (=> ([p path])
                   (.add modules path)
                   (print "loading" path)
                   `(include @p)))))
 (macro init-shell ()

        (print  "meta modules loading")

        (assign sibilant.dir (process.cwd))
        (print "set sibilant dir to process.cwd")
        (print "added process.cwd to meta module lookup")
        (print "meta modules loaded")
        `(add-to-module-lookup))) 
