(namespace markup)
;; element functions are of the form `(f @name {@attributes} [@children])
(macro xml ( element-function root)
       `(@element-function ...@(let ((name `(quote @(first (content-of (first (content-of root))))))
                                     (elements (rest root.contents))
                                     (attributes-list [])
                                     (values []))


                                 (while (> elements.length 0)
                                   (let ((el (.shift elements)))

                                     (if (dotted? el)
                                         (do (.push attributes-list ("'" (get (first el.contents) 'token) "'"))
                                             (.push attributes-list (.shift elements)))

                                         (and (expression? el)
                                              (dotted? (first el.contents)))
                                         (.push values `(xml @element-function  @el))

                                         (.push values el))))


                                 [ name  `(hash ...@attributes-list)  `[...@values] ])))

(macro dotted? (token) `(= (get @token "type") "dots"))
(macro markup (root)
       `(xml (create Html-element) @root))
(macro with-markup-to-stream (stream element)
       `(pipe (markup @element)
              (.render @stream)
              (then-do (.end @stream))))

(macro def-markup-template (name args element)
       `(def @name @args
          (markup @element)))
